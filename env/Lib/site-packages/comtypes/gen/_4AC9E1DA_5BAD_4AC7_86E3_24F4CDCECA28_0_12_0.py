# -*- coding: mbcs -*-

from ctypes import *
import comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0
from comtypes import (
    _check_version, BSTR, CoClass, COMMETHOD, dispid, GUID, IUnknown
)
from ctypes import HRESULT
from comtypes.automation import _midlSAFEARRAY, IDispatch, VARIANT
from ctypes.wintypes import VARIANT_BOOL
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from comtypes import hints


_lcid = 0  # change this if required
typelib_path = 'C:\\Program Files\\Microsoft Office\\root\\VFS\\ProgramFilesCommonX64\\Microsoft Shared\\Office16\\ACEDAO.DLL'

# values for enumeration 'CommitTransOptionsEnum'
dbForceOSFlush = 1
CommitTransOptionsEnum = c_int  # enum

# values for enumeration '_DAOSuppHelp'
LogMessages = 0
KeepLocal = 0
Replicable = 0
ReplicableBool = 0
V1xNullBehavior = 0
_DAOSuppHelp = c_int  # enum

# values for enumeration 'RelationAttributeEnum'
dbRelationUnique = 1
dbRelationDontEnforce = 2
dbRelationInherited = 4
dbRelationUpdateCascade = 256
dbRelationDeleteCascade = 4096
dbRelationLeft = 16777216
dbRelationRight = 33554432
RelationAttributeEnum = c_int  # enum

# values for enumeration 'IdleEnum'
dbFreeLocks = 1
dbRefreshCache = 8
IdleEnum = c_int  # enum

# values for enumeration 'RecordsetOptionEnum'
dbDenyWrite = 1
dbDenyRead = 2
dbReadOnly = 4
dbAppendOnly = 8
dbInconsistent = 16
dbConsistent = 32
dbSQLPassThrough = 64
dbFailOnError = 128
dbForwardOnly = 256
dbSeeChanges = 512
dbRunAsync = 1024
dbExecDirect = 2048
RecordsetOptionEnum = c_int  # enum

# values for enumeration 'TableDefAttributeEnum'
dbAttachExclusive = 65536
dbAttachSavePWD = 131072
dbSystemObject = -2147483646
dbAttachedTable = 1073741824
dbAttachedODBC = 536870912
dbHiddenObject = 1
TableDefAttributeEnum = c_int  # enum

# values for enumeration 'PermissionEnum'
dbSecNoAccess = 0
dbSecFullAccess = 1048575
dbSecDelete = 65536
dbSecReadSec = 131072
dbSecWriteSec = 262144
dbSecWriteOwner = 524288
dbSecDBCreate = 1
dbSecDBOpen = 2
dbSecDBExclusive = 4
dbSecDBAdmin = 8
dbSecCreate = 1
dbSecReadDef = 4
dbSecWriteDef = 65548
dbSecRetrieveData = 20
dbSecInsertData = 32
dbSecReplaceData = 64
dbSecDeleteData = 128
PermissionEnum = c_int  # enum

# values for enumeration 'RecordsetTypeEnum'
dbOpenTable = 1
dbOpenDynaset = 2
dbOpenSnapshot = 4
dbOpenForwardOnly = 8
dbOpenDynamic = 16
RecordsetTypeEnum = c_int  # enum

# values for enumeration 'EditModeEnum'
dbEditNone = 0
dbEditInProgress = 1
dbEditAdd = 2
EditModeEnum = c_int  # enum

# values for enumeration 'QueryDefTypeEnum'
dbQSelect = 0
dbQProcedure = 224
dbQAction = 240
dbQCrosstab = 16
dbQDelete = 32
dbQUpdate = 48
dbQAppend = 64
dbQMakeTable = 80
dbQDDL = 96
dbQSQLPassThrough = 112
dbQSetOperation = 128
dbQSPTBulk = 144
dbQCompound = 160
QueryDefTypeEnum = c_int  # enum

# values for enumeration 'LockTypeEnum'
dbPessimistic = 2
dbOptimistic = 3
dbOptimisticValue = 1
dbOptimisticBatch = 5
LockTypeEnum = c_int  # enum

# values for enumeration 'SynchronizeTypeEnum'
dbRepExportChanges = 1
dbRepImportChanges = 2
dbRepImpExpChanges = 4
dbRepSyncInternet = 16
SynchronizeTypeEnum = c_int  # enum

# values for enumeration 'ReplicaTypeEnum'
dbRepMakeReadOnly = 2
dbRepMakePartial = 1
ReplicaTypeEnum = c_int  # enum

# values for enumeration 'UpdateCriteriaEnum'
dbCriteriaKey = 1
dbCriteriaModValues = 2
dbCriteriaAllCols = 4
dbCriteriaTimestamp = 8
dbCriteriaDeleteInsert = 16
dbCriteriaUpdate = 32
UpdateCriteriaEnum = c_int  # enum

# values for enumeration 'WorkspaceTypeEnum'
dbUseODBC = 1
dbUseJet = 2
WorkspaceTypeEnum = c_int  # enum

# values for enumeration 'QueryDefStateEnum'
dbQPrepare = 1
dbQUnprepare = 2
QueryDefStateEnum = c_int  # enum

# values for enumeration 'CursorDriverEnum'
dbUseDefaultCursor = -1
dbUseODBCCursor = 1
dbUseServerCursor = 2
dbUseClientBatchCursor = 3
dbUseNoCursor = 4
CursorDriverEnum = c_int  # enum

# values for enumeration 'FieldAttributeEnum'
dbFixedField = 1
dbVariableField = 2
dbAutoIncrField = 16
dbUpdatableField = 32
dbSystemField = 8192
dbHyperlinkField = 32768
dbDescending = 1
FieldAttributeEnum = c_int  # enum

# values for enumeration 'DriverPromptEnum'
dbDriverPrompt = 2
dbDriverNoPrompt = 1
dbDriverComplete = 0
dbDriverCompleteRequired = 3
DriverPromptEnum = c_int  # enum

# values for enumeration 'DatabaseTypeEnum'
dbVersion10 = 1
dbEncrypt = 2
dbDecrypt = 4
dbVersion11 = 8
dbVersion20 = 16
dbVersion30 = 32
dbVersion40 = 64
dbVersion120 = 128
dbVersion140 = 256
dbVersion150 = 512
dbVersion167 = 1024
DatabaseTypeEnum = c_int  # enum

# values for enumeration 'DataTypeEnum'
dbBoolean = 1
dbByte = 2
dbInteger = 3
dbLong = 4
dbCurrency = 5
dbSingle = 6
dbDouble = 7
dbDate = 8
dbBinary = 9
dbText = 10
dbLongBinary = 11
dbMemo = 12
dbGUID = 15
dbBigInt = 16
dbVarBinary = 17
dbChar = 18
dbNumeric = 19
dbDecimal = 20
dbFloat = 21
dbTime = 22
dbTimeStamp = 23
dbDateTimeExtended = 26
dbAttachment = 101
dbComplexByte = 102
dbComplexInteger = 103
dbComplexLong = 104
dbComplexSingle = 105
dbComplexDouble = 106
dbComplexGUID = 107
dbComplexDecimal = 108
dbComplexText = 109
DataTypeEnum = c_int  # enum

# values for enumeration 'SetOptionEnum'
dbPageTimeout = 6
dbLockRetry = 57
dbMaxBufferSize = 8
dbUserCommitSync = 58
dbImplicitCommitSync = 59
dbExclusiveAsyncDelay = 60
dbSharedAsyncDelay = 61
dbMaxLocksPerFile = 62
dbLockDelay = 63
dbRecycleLVs = 65
dbFlushTransactionTimeout = 66
dbPagesLockedToTableLock = 70
dbPasswordEncryptionProvider = 80
dbPasswordEncryptionAlgorithm = 81
dbPasswordEncryptionKeyLength = 82
SetOptionEnum = c_int  # enum

# values for enumeration 'CollatingOrderEnum'
dbSortNeutral = 1024
dbSortArabic = 1025
dbSortCyrillic = 1049
dbSortCzech = 1029
dbSortDutch = 1043
dbSortGeneral = 1033
dbSortGreek = 1032
dbSortHebrew = 1037
dbSortHungarian = 1038
dbSortIcelandic = 1039
dbSortNorwdan = 1030
dbSortPDXIntl = 1033
dbSortPDXNor = 1030
dbSortPDXSwe = 1053
dbSortPolish = 1045
dbSortSpanish = 1034
dbSortSwedFin = 1053
dbSortTurkish = 1055
dbSortJapanese = 1041
dbSortChineseSimplified = 2052
dbSortChineseTraditional = 1028
dbSortKorean = 1042
dbSortThai = 1054
dbSortSlovenian = 1060
dbSortJapaneseRadicalStrokeCount = 263185
dbSortHindi = 1081
dbSortUndefined = -1
CollatingOrderEnum = c_int  # enum

# values for enumeration 'ParameterDirectionEnum'
dbParamInput = 1
dbParamOutput = 2
dbParamInputOutput = 3
dbParamReturnValue = 4
ParameterDirectionEnum = c_int  # enum

# values for enumeration 'UpdateTypeEnum'
dbUpdateBatch = 4
dbUpdateRegular = 1
dbUpdateCurrentRecord = 2
UpdateTypeEnum = c_int  # enum

# values for enumeration 'RecordStatusEnum'
dbRecordUnmodified = 0
dbRecordModified = 1
dbRecordNew = 2
dbRecordDeleted = 3
dbRecordDBDeleted = 4
RecordStatusEnum = c_int  # enum



class _Collection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000000A0-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _NewEnum(self) -> hints.Incomplete: ...
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def Refresh(self) -> hints.Hresult: ...


class Containers(_Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{00000093-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Item: hints.Incomplete) -> 'Container': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


_Collection._methods_ = [
    COMMETHOD(
        [dispid(1610743808), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_short), 'c')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppunk')
    ),
    COMMETHOD([dispid(1610743810)], HRESULT, 'Refresh'),
]

################################################################
# code template for _Collection implementation
# class _Collection_Impl(object):
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return c
#
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppunk
#
#     def Refresh(self):
#         '-no docstring-'
#         #return 
#


class _DAO(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{0000000A-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Properties(self) -> 'Properties': ...
        Properties = hints.normal_property(_get_Properties)


class Container(_DAO):
    _case_insensitive_ = True
    _iid_ = GUID('{00000091-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Owner(self) -> hints.Incomplete: ...
        def _set_Owner(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Owner = hints.normal_property(_get_Owner, _set_Owner)
        def _get_UserName(self) -> hints.Incomplete: ...
        def _set_UserName(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        UserName = hints.normal_property(_get_UserName, _set_UserName)
        def _get_Permissions(self) -> hints.Incomplete: ...
        def _set_Permissions(self, pl: hints.Incomplete) -> hints.Hresult: ...
        Permissions = hints.normal_property(_get_Permissions, _set_Permissions)
        def _get_Inherit(self) -> hints.Incomplete: ...
        def _set_Inherit(self, pb: hints.Incomplete) -> hints.Hresult: ...
        Inherit = hints.normal_property(_get_Inherit, _set_Inherit)
        def _get_Documents(self) -> 'Documents': ...
        Documents = hints.normal_property(_get_Documents)
        def _get_AllPermissions(self) -> hints.Incomplete: ...
        AllPermissions = hints.normal_property(_get_AllPermissions)


Containers._methods_ = [
    COMMETHOD(
        [dispid(0), 'hidden', 'propget'],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Item'),
        (['out', 'retval'], POINTER(POINTER(Container)), 'ppctn')
    ),
]

################################################################
# code template for Containers implementation
# class Containers_Impl(object):
#     @property
#     def Item(self, Item):
#         '-no docstring-'
#         #return ppctn
#


class _DynaCollection(_Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{000000A2-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def Append(self, Object: hints.Incomplete) -> hints.Hresult: ...
        def Delete(self, Name: hints.Incomplete) -> hints.Hresult: ...


class QueryDefs(_DynaCollection):
    _case_insensitive_ = True
    _iid_ = GUID('{0000007B-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Item: hints.Incomplete) -> hints.Annotated['_QueryDef', hints.FirstComItfOf['QueryDef']]: ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


_DynaCollection._methods_ = [
    COMMETHOD(
        [dispid(1610809344)],
        HRESULT,
        'Append',
        (['in'], POINTER(IDispatch), 'Object')
    ),
    COMMETHOD(
        [dispid(1610809345)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name')
    ),
]

################################################################
# code template for _DynaCollection implementation
# class _DynaCollection_Impl(object):
#     def Append(self, Object):
#         '-no docstring-'
#         #return 
#
#     def Delete(self, Name):
#         '-no docstring-'
#         #return 
#


class QueryDef(CoClass):
    _reg_clsid_ = GUID('{D5EC4D34-77DA-4F7A-B8C4-8A910C1C1CFE}')
    _idlflags_ = ['licensed']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4AC9E1DA-5BAD-4AC7-86E3-24F4CDCECA28}', 12, 0)


class _QueryDef(_DAO):
    _case_insensitive_ = True
    _iid_ = GUID('{00000079-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_DateCreated(self) -> hints.Incomplete: ...
        DateCreated = hints.normal_property(_get_DateCreated)
        def _get_LastUpdated(self) -> hints.Incomplete: ...
        LastUpdated = hints.normal_property(_get_LastUpdated)
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_ODBCTimeout(self) -> hints.Incomplete: ...
        def _set_ODBCTimeout(self, ps: hints.Incomplete) -> hints.Hresult: ...
        ODBCTimeout = hints.normal_property(_get_ODBCTimeout, _set_ODBCTimeout)
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)
        def _get_SQL(self) -> hints.Incomplete: ...
        def _set_SQL(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        SQL = hints.normal_property(_get_SQL, _set_SQL)
        def _get_Updatable(self) -> hints.Incomplete: ...
        Updatable = hints.normal_property(_get_Updatable)
        def _get_Connect(self) -> hints.Incomplete: ...
        def _set_Connect(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Connect = hints.normal_property(_get_Connect, _set_Connect)
        def _get_ReturnsRecords(self) -> hints.Incomplete: ...
        def _set_ReturnsRecords(self, pb: hints.Incomplete) -> hints.Hresult: ...
        ReturnsRecords = hints.normal_property(_get_ReturnsRecords, _set_ReturnsRecords)
        def _get_RecordsAffected(self) -> hints.Incomplete: ...
        RecordsAffected = hints.normal_property(_get_RecordsAffected)
        def _get_Fields(self) -> 'Fields': ...
        Fields = hints.normal_property(_get_Fields)
        def _get_Parameters(self) -> 'Parameters': ...
        Parameters = hints.normal_property(_get_Parameters)
        def Close(self) -> hints.Hresult: ...
        def _30_OpenRecordset(self, Type: hints.Incomplete = ..., Options: hints.Incomplete = ...) -> 'Recordset': ...
        def _30__OpenRecordset(self, Type: hints.Incomplete = ..., Options: hints.Incomplete = ...) -> 'Recordset': ...
        def _Copy(self) -> hints.Annotated['_QueryDef', hints.FirstComItfOf['QueryDef']]: ...
        def Execute(self, Options: hints.Incomplete = ...) -> hints.Hresult: ...
        def Compare(self, pQdef: hints.Incomplete, lps: hints.Incomplete) -> hints.Hresult: ...
        def CreateDynaset(self, Options: hints.Incomplete = ..., Inconsistent: hints.Incomplete = ...) -> 'Recordset': ...
        def CreateSnapshot(self, Options: hints.Incomplete = ...) -> 'Recordset': ...
        def ListParameters(self) -> 'Recordset': ...
        def CreateProperty(self, Name: hints.Incomplete = ..., Type: hints.Incomplete = ..., Value: hints.Incomplete = ..., DDL: hints.Incomplete = ...) -> 'Property': ...
        def OpenRecordset(self, Type: hints.Incomplete = ..., Options: hints.Incomplete = ..., LockEdit: hints.Incomplete = ...) -> 'Recordset': ...
        def _OpenRecordset(self, Type: hints.Incomplete = ..., Options: hints.Incomplete = ..., LockEdit: hints.Incomplete = ...) -> 'Recordset': ...
        def Cancel(self) -> hints.Hresult: ...
        def _get_hStmt(self) -> hints.Incomplete: ...
        hStmt = hints.normal_property(_get_hStmt)
        def _get_MaxRecords(self) -> hints.Incomplete: ...
        def _set_MaxRecords(self, pMxRecs: hints.Incomplete) -> hints.Hresult: ...
        MaxRecords = hints.normal_property(_get_MaxRecords, _set_MaxRecords)
        def _get_StillExecuting(self) -> hints.Incomplete: ...
        StillExecuting = hints.normal_property(_get_StillExecuting)
        def _get_CacheSize(self) -> hints.Incomplete: ...
        def _set_CacheSize(self, lCacheSize: hints.Incomplete) -> hints.Hresult: ...
        CacheSize = hints.normal_property(_get_CacheSize, _set_CacheSize)
        def _get_Prepare(self) -> hints.Incomplete: ...
        def _set_Prepare(self, pb: hints.Incomplete) -> hints.Hresult: ...
        Prepare = hints.normal_property(_get_Prepare, _set_Prepare)


QueryDef._com_interfaces_ = [_QueryDef]

QueryDefs._methods_ = [
    COMMETHOD(
        [dispid(0), 'hidden', 'propget'],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Item'),
        (['out', 'retval'], POINTER(POINTER(QueryDef)), 'ppqdef')
    ),
]

################################################################
# code template for QueryDefs implementation
# class QueryDefs_Impl(object):
#     @property
#     def Item(self, Item):
#         '-no docstring-'
#         #return ppqdef
#
dbLangCzech = ';LANGID=0x0405;CP=1250;COUNTRY=0'  # Constant STRING


class Workspaces(_DynaCollection):
    _case_insensitive_ = True
    _iid_ = GUID('{0000003B-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Item: hints.Incomplete) -> 'Workspace': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


class Workspace(_DAO):
    _case_insensitive_ = True
    _iid_ = GUID('{00000039-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_UserName(self) -> hints.Incomplete: ...
        UserName = hints.normal_property(_get_UserName)
        def _set__30_UserName(self, rhs: hints.Incomplete) -> hints.Hresult: ...
        _30_UserName = hints.normal_property(fset=_set__30_UserName)
        def _set__30_Password(self, rhs: hints.Incomplete) -> hints.Hresult: ...
        _30_Password = hints.normal_property(fset=_set__30_Password)
        def _get_IsolateODBCTrans(self) -> hints.Incomplete: ...
        def _set_IsolateODBCTrans(self, ps: hints.Incomplete) -> hints.Hresult: ...
        IsolateODBCTrans = hints.normal_property(_get_IsolateODBCTrans, _set_IsolateODBCTrans)
        def _get_Databases(self) -> 'Databases': ...
        Databases = hints.normal_property(_get_Databases)
        def _get_Users(self) -> 'Users': ...
        Users = hints.normal_property(_get_Users)
        def _get_Groups(self) -> 'Groups': ...
        Groups = hints.normal_property(_get_Groups)
        def BeginTrans(self) -> hints.Hresult: ...
        def CommitTrans(self, Options: hints.Incomplete = ...) -> hints.Hresult: ...
        def Close(self) -> hints.Hresult: ...
        def Rollback(self) -> hints.Hresult: ...
        def OpenDatabase(self, Name: hints.Incomplete, Options: hints.Incomplete = ..., ReadOnly: hints.Incomplete = ..., Connect: hints.Incomplete = ...) -> 'Database': ...
        def CreateDatabase(self, Name: hints.Incomplete, Connect: hints.Incomplete, Option: hints.Incomplete = ...) -> 'Database': ...
        def CreateUser(self, Name: hints.Incomplete = ..., PID: hints.Incomplete = ..., Password: hints.Incomplete = ...) -> hints.Annotated['_User', hints.FirstComItfOf['User']]: ...
        def CreateGroup(self, Name: hints.Incomplete = ..., PID: hints.Incomplete = ...) -> hints.Annotated['_Group', hints.FirstComItfOf['Group']]: ...
        def OpenConnection(self, Name: hints.Incomplete, Options: hints.Incomplete = ..., ReadOnly: hints.Incomplete = ..., Connect: hints.Incomplete = ...) -> 'Connection': ...
        def _get_LoginTimeout(self) -> hints.Incomplete: ...
        def _set_LoginTimeout(self, pTimeout: hints.Incomplete) -> hints.Hresult: ...
        LoginTimeout = hints.normal_property(_get_LoginTimeout, _set_LoginTimeout)
        def _get_DefaultCursorDriver(self) -> hints.Incomplete: ...
        def _set_DefaultCursorDriver(self, pCursorType: hints.Incomplete) -> hints.Hresult: ...
        DefaultCursorDriver = hints.normal_property(_get_DefaultCursorDriver, _set_DefaultCursorDriver)
        def _get_hEnv(self) -> hints.Incomplete: ...
        hEnv = hints.normal_property(_get_hEnv)
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)
        def _get_Connections(self) -> 'Connections': ...
        Connections = hints.normal_property(_get_Connections)


Workspaces._methods_ = [
    COMMETHOD(
        [dispid(0), 'hidden', 'propget'],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Item'),
        (['out', 'retval'], POINTER(POINTER(Workspace)), 'ppwrk')
    ),
]

################################################################
# code template for Workspaces implementation
# class Workspaces_Impl(object):
#     @property
#     def Item(self, Item):
#         '-no docstring-'
#         #return ppwrk
#
dbLangArabic = ';LANGID=0x0401;CP=1256;COUNTRY=0'  # Constant STRING
dbLangDutch = ';LANGID=0x0413;CP=1252;COUNTRY=0'  # Constant STRING


class Relations(_DynaCollection):
    _case_insensitive_ = True
    _iid_ = GUID('{0000008B-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Item: hints.Incomplete) -> hints.Annotated['_Relation', hints.FirstComItfOf['Relation']]: ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


class Relation(CoClass):
    _reg_clsid_ = GUID('{D0B22D03-D05D-4C6D-8AB7-9392E84A87B9}')
    _idlflags_ = ['licensed']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4AC9E1DA-5BAD-4AC7-86E3-24F4CDCECA28}', 12, 0)


class _Relation(_DAO):
    _case_insensitive_ = True
    _iid_ = GUID('{00000089-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_Table(self) -> hints.Incomplete: ...
        def _set_Table(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Table = hints.normal_property(_get_Table, _set_Table)
        def _get_ForeignTable(self) -> hints.Incomplete: ...
        def _set_ForeignTable(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        ForeignTable = hints.normal_property(_get_ForeignTable, _set_ForeignTable)
        def _get_Attributes(self) -> hints.Incomplete: ...
        def _set_Attributes(self, pl: hints.Incomplete) -> hints.Hresult: ...
        Attributes = hints.normal_property(_get_Attributes, _set_Attributes)
        def _get_Fields(self) -> 'Fields': ...
        Fields = hints.normal_property(_get_Fields)
        def CreateField(self, Name: hints.Incomplete = ..., Type: hints.Incomplete = ..., Size: hints.Incomplete = ...) -> hints.Annotated['_Field', hints.FirstComItfOf['Field']]: ...
        def _get_PartialReplica(self) -> hints.Incomplete: ...
        def _set_PartialReplica(self, pfPartialReplica: hints.Incomplete) -> hints.Hresult: ...
        PartialReplica = hints.normal_property(_get_PartialReplica, _set_PartialReplica)


Relation._com_interfaces_ = [_Relation]

Relations._methods_ = [
    COMMETHOD(
        [dispid(0), 'hidden', 'propget'],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Item'),
        (['out', 'retval'], POINTER(POINTER(Relation)), 'pprel')
    ),
]

################################################################
# code template for Relations implementation
# class Relations_Impl(object):
#     @property
#     def Item(self, Item):
#         '-no docstring-'
#         #return pprel
#
dbLangGeneral = ';LANGID=0x0409;CP=1252;COUNTRY=0'  # Constant STRING
dbLangGreek = ';LANGID=0x0408;CP=1253;COUNTRY=0'  # Constant STRING
dbLangHebrew = ';LANGID=0x040D;CP=1255;COUNTRY=0'  # Constant STRING
dbLangHungarian = ';LANGID=0x040E;CP=1250;COUNTRY=0'  # Constant STRING


class Documents(_Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{0000009B-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Item: hints.Incomplete) -> 'Document': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


class Document(_DAO):
    _case_insensitive_ = True
    _iid_ = GUID('{00000099-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Owner(self) -> hints.Incomplete: ...
        def _set_Owner(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Owner = hints.normal_property(_get_Owner, _set_Owner)
        def _get_Container(self) -> hints.Incomplete: ...
        Container = hints.normal_property(_get_Container)
        def _get_UserName(self) -> hints.Incomplete: ...
        def _set_UserName(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        UserName = hints.normal_property(_get_UserName, _set_UserName)
        def _get_Permissions(self) -> hints.Incomplete: ...
        def _set_Permissions(self, pl: hints.Incomplete) -> hints.Hresult: ...
        Permissions = hints.normal_property(_get_Permissions, _set_Permissions)
        def _get_DateCreated(self) -> hints.Incomplete: ...
        DateCreated = hints.normal_property(_get_DateCreated)
        def _get_LastUpdated(self) -> hints.Incomplete: ...
        LastUpdated = hints.normal_property(_get_LastUpdated)
        def _get_AllPermissions(self) -> hints.Incomplete: ...
        AllPermissions = hints.normal_property(_get_AllPermissions)
        def CreateProperty(self, Name: hints.Incomplete = ..., Type: hints.Incomplete = ..., Value: hints.Incomplete = ..., DDL: hints.Incomplete = ...) -> 'Property': ...


Documents._methods_ = [
    COMMETHOD(
        [dispid(0), 'hidden', 'propget'],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Item'),
        (['out', 'retval'], POINTER(POINTER(Document)), 'ppdoc')
    ),
]

################################################################
# code template for Documents implementation
# class Documents_Impl(object):
#     @property
#     def Item(self, Item):
#         '-no docstring-'
#         #return ppdoc
#
dbLangIcelandic = ';LANGID=0x040F;CP=1252;COUNTRY=0'  # Constant STRING


class Group(CoClass):
    _reg_clsid_ = GUID('{97A2762C-403C-4953-A121-7A75ABCE4373}')
    _idlflags_ = ['licensed', 'hidden']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4AC9E1DA-5BAD-4AC7-86E3-24F4CDCECA28}', 12, 0)


class _Group(_DAO):
    _case_insensitive_ = True
    _iid_ = GUID('{00000061-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _set_PID(self, rhs: hints.Incomplete) -> hints.Hresult: ...
        PID = hints.normal_property(fset=_set_PID)
        def _get_Users(self) -> 'Users': ...
        Users = hints.normal_property(_get_Users)
        def CreateUser(self, Name: hints.Incomplete = ..., PID: hints.Incomplete = ..., Password: hints.Incomplete = ...) -> hints.Annotated['_User', hints.FirstComItfOf['User']]: ...


Group._com_interfaces_ = [_Group]


class Properties(_DynaCollection):
    _case_insensitive_ = True
    _iid_ = GUID('{00000029-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Item: hints.Incomplete) -> 'Property': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


_DAO._methods_ = [
    COMMETHOD(
        [dispid(10), 'propget'],
        HRESULT,
        'Properties',
        (['out', 'retval'], POINTER(POINTER(Properties)), 'ppprops')
    ),
]

################################################################
# code template for _DAO implementation
# class _DAO_Impl(object):
#     @property
#     def Properties(self):
#         '-no docstring-'
#         #return ppprops
#


class Databases(_Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{00000073-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Item: hints.Incomplete) -> 'Database': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


class Users(_DynaCollection):
    _case_insensitive_ = True
    _iid_ = GUID('{0000006B-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Item: hints.Incomplete) -> hints.Annotated['_User', hints.FirstComItfOf['User']]: ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


class Groups(_DynaCollection):
    _case_insensitive_ = True
    _iid_ = GUID('{00000063-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Item: hints.Incomplete) -> hints.Annotated['_Group', hints.FirstComItfOf['Group']]: ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


class Database(_DAO):
    _case_insensitive_ = True
    _iid_ = GUID('{00000071-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_CollatingOrder(self) -> hints.Incomplete: ...
        CollatingOrder = hints.normal_property(_get_CollatingOrder)
        def _get_Connect(self) -> hints.Incomplete: ...
        def _set_Connect(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Connect = hints.normal_property(_get_Connect, _set_Connect)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_QueryTimeout(self) -> hints.Incomplete: ...
        def _set_QueryTimeout(self, ps: hints.Incomplete) -> hints.Hresult: ...
        QueryTimeout = hints.normal_property(_get_QueryTimeout, _set_QueryTimeout)
        def _get_Transactions(self) -> hints.Incomplete: ...
        Transactions = hints.normal_property(_get_Transactions)
        def _get_Updatable(self) -> hints.Incomplete: ...
        Updatable = hints.normal_property(_get_Updatable)
        def _get_Version(self) -> hints.Incomplete: ...
        Version = hints.normal_property(_get_Version)
        def _get_RecordsAffected(self) -> hints.Incomplete: ...
        RecordsAffected = hints.normal_property(_get_RecordsAffected)
        def _get_TableDefs(self) -> 'TableDefs': ...
        TableDefs = hints.normal_property(_get_TableDefs)
        def _get_QueryDefs(self) -> 'QueryDefs': ...
        QueryDefs = hints.normal_property(_get_QueryDefs)
        def _get_Relations(self) -> 'Relations': ...
        Relations = hints.normal_property(_get_Relations)
        def _get_Containers(self) -> 'Containers': ...
        Containers = hints.normal_property(_get_Containers)
        def _get_Recordsets(self) -> 'Recordsets': ...
        Recordsets = hints.normal_property(_get_Recordsets)
        def Close(self) -> hints.Hresult: ...
        def Execute(self, Query: hints.Incomplete, Options: hints.Incomplete = ...) -> hints.Hresult: ...
        def _30_OpenRecordset(self, Name: hints.Incomplete, Type: hints.Incomplete = ..., Options: hints.Incomplete = ...) -> 'Recordset': ...
        def CreateProperty(self, Name: hints.Incomplete = ..., Type: hints.Incomplete = ..., Value: hints.Incomplete = ..., DDL: hints.Incomplete = ...) -> 'Property': ...
        def CreateRelation(self, Name: hints.Incomplete = ..., Table: hints.Incomplete = ..., ForeignTable: hints.Incomplete = ..., Attributes: hints.Incomplete = ...) -> hints.Annotated['_Relation', hints.FirstComItfOf['Relation']]: ...
        def CreateTableDef(self, Name: hints.Incomplete = ..., Attributes: hints.Incomplete = ..., SourceTableName: hints.Incomplete = ..., Connect: hints.Incomplete = ...) -> hints.Annotated['_TableDef', hints.FirstComItfOf['TableDef']]: ...
        def BeginTrans(self) -> hints.Hresult: ...
        def CommitTrans(self, Options: hints.Incomplete = ...) -> hints.Hresult: ...
        def Rollback(self) -> hints.Hresult: ...
        def CreateDynaset(self, Name: hints.Incomplete, Options: hints.Incomplete = ..., Inconsistent: hints.Incomplete = ...) -> 'Recordset': ...
        def CreateQueryDef(self, Name: hints.Incomplete = ..., SQLText: hints.Incomplete = ...) -> hints.Annotated['_QueryDef', hints.FirstComItfOf['QueryDef']]: ...
        def CreateSnapshot(self, Source: hints.Incomplete, Options: hints.Incomplete = ...) -> 'Recordset': ...
        def DeleteQueryDef(self, Name: hints.Incomplete) -> hints.Hresult: ...
        def ExecuteSQL(self, SQL: hints.Incomplete) -> hints.Incomplete: ...
        def ListFields(self, Name: hints.Incomplete) -> 'Recordset': ...
        def ListTables(self) -> 'Recordset': ...
        def OpenQueryDef(self, Name: hints.Incomplete) -> hints.Annotated['_QueryDef', hints.FirstComItfOf['QueryDef']]: ...
        def OpenTable(self, Name: hints.Incomplete, Options: hints.Incomplete = ...) -> 'Recordset': ...
        def _get_ReplicaID(self) -> hints.Incomplete: ...
        ReplicaID = hints.normal_property(_get_ReplicaID)
        def _get_DesignMasterID(self) -> hints.Incomplete: ...
        def _set_DesignMasterID(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        DesignMasterID = hints.normal_property(_get_DesignMasterID, _set_DesignMasterID)
        def Synchronize(self, DbPathName: hints.Incomplete, ExchangeType: hints.Incomplete = ...) -> hints.Hresult: ...
        def MakeReplica(self, PathName: hints.Incomplete, Description: hints.Incomplete, Options: hints.Incomplete = ...) -> hints.Hresult: ...
        def NewPassword(self, bstrOld: hints.Incomplete, bstrNew: hints.Incomplete) -> hints.Hresult: ...
        def OpenRecordset(self, Name: hints.Incomplete, Type: hints.Incomplete = ..., Options: hints.Incomplete = ..., LockEdit: hints.Incomplete = ...) -> 'Recordset': ...
        def _get_Connection(self) -> 'Connection': ...
        Connection = hints.normal_property(_get_Connection)
        def PopulatePartial(self, DbPathName: hints.Incomplete) -> hints.Hresult: ...


class User(CoClass):
    _reg_clsid_ = GUID('{805B7F91-C9CF-4EDF-ACA6-775664FDFB3E}')
    _idlflags_ = ['licensed', 'hidden']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4AC9E1DA-5BAD-4AC7-86E3-24F4CDCECA28}', 12, 0)


class _User(_DAO):
    _case_insensitive_ = True
    _iid_ = GUID('{00000069-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _set_PID(self, rhs: hints.Incomplete) -> hints.Hresult: ...
        PID = hints.normal_property(fset=_set_PID)
        def _set_Password(self, rhs: hints.Incomplete) -> hints.Hresult: ...
        Password = hints.normal_property(fset=_set_Password)
        def _get_Groups(self) -> 'Groups': ...
        Groups = hints.normal_property(_get_Groups)
        def NewPassword(self, bstrOld: hints.Incomplete, bstrNew: hints.Incomplete) -> hints.Hresult: ...
        def CreateGroup(self, Name: hints.Incomplete = ..., PID: hints.Incomplete = ...) -> hints.Annotated['_Group', hints.FirstComItfOf['Group']]: ...


User._com_interfaces_ = [_User]


class Connection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{00000041-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Connect(self) -> hints.Incomplete: ...
        Connect = hints.normal_property(_get_Connect)
        def _get_Database(self) -> 'Database': ...
        Database = hints.normal_property(_get_Database)
        def _get_hDbc(self) -> hints.Incomplete: ...
        hDbc = hints.normal_property(_get_hDbc)
        def _get_QueryTimeout(self) -> hints.Incomplete: ...
        def _set_QueryTimeout(self, pSeconds: hints.Incomplete) -> hints.Hresult: ...
        QueryTimeout = hints.normal_property(_get_QueryTimeout, _set_QueryTimeout)
        def _get_Transactions(self) -> hints.Incomplete: ...
        Transactions = hints.normal_property(_get_Transactions)
        def _get_RecordsAffected(self) -> hints.Incomplete: ...
        RecordsAffected = hints.normal_property(_get_RecordsAffected)
        def _get_StillExecuting(self) -> hints.Incomplete: ...
        StillExecuting = hints.normal_property(_get_StillExecuting)
        def _get_Updatable(self) -> hints.Incomplete: ...
        Updatable = hints.normal_property(_get_Updatable)
        def _get_QueryDefs(self) -> 'QueryDefs': ...
        QueryDefs = hints.normal_property(_get_QueryDefs)
        def _get_Recordsets(self) -> 'Recordsets': ...
        Recordsets = hints.normal_property(_get_Recordsets)
        def Cancel(self) -> hints.Hresult: ...
        def Close(self) -> hints.Hresult: ...
        def CreateQueryDef(self, Name: hints.Incomplete = ..., SQLText: hints.Incomplete = ...) -> hints.Annotated['_QueryDef', hints.FirstComItfOf['QueryDef']]: ...
        def Execute(self, Query: hints.Incomplete, Options: hints.Incomplete = ...) -> hints.Hresult: ...
        def OpenRecordset(self, Name: hints.Incomplete, Type: hints.Incomplete = ..., Options: hints.Incomplete = ..., LockEdit: hints.Incomplete = ...) -> 'Recordset': ...


class Connections(_Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{00000043-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Item: hints.Incomplete) -> 'Connection': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


Workspace._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809344), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809346), 'hidden', 'propget'],
        HRESULT,
        'UserName',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809347), 'restricted', 'propput'],
        HRESULT,
        '_30_UserName',
        (['in'], BSTR, 'rhs')
    ),
    COMMETHOD(
        [dispid(1610809348), 'restricted', 'propput'],
        HRESULT,
        '_30_Password',
        (['in'], BSTR, 'rhs')
    ),
    COMMETHOD(
        [dispid(1610809349), 'propget'],
        HRESULT,
        'IsolateODBCTrans',
        (['out', 'retval'], POINTER(c_short), 'ps')
    ),
    COMMETHOD(
        [dispid(1610809349), 'propput'],
        HRESULT,
        'IsolateODBCTrans',
        (['in'], c_short, 'ps')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Databases',
        (['out', 'retval'], POINTER(POINTER(Databases)), 'ppdbs')
    ),
    COMMETHOD(
        [dispid(1610809352), 'hidden', 'propget'],
        HRESULT,
        'Users',
        (['out', 'retval'], POINTER(POINTER(Users)), 'ppusrs')
    ),
    COMMETHOD(
        [dispid(1610809353), 'hidden', 'propget'],
        HRESULT,
        'Groups',
        (['out', 'retval'], POINTER(POINTER(Groups)), 'ppgrps')
    ),
    COMMETHOD([dispid(1610809354)], HRESULT, 'BeginTrans'),
    COMMETHOD(
        [dispid(1610809355)],
        HRESULT,
        'CommitTrans',
        (['in', 'optional'], c_int, 'Options', 0)
    ),
    COMMETHOD([dispid(1610809356)], HRESULT, 'Close'),
    COMMETHOD([dispid(1610809357)], HRESULT, 'Rollback'),
    COMMETHOD(
        [dispid(1610809358)],
        HRESULT,
        'OpenDatabase',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], VARIANT, 'Options'),
        (['in', 'optional'], VARIANT, 'ReadOnly'),
        (['in', 'optional'], VARIANT, 'Connect'),
        (['out', 'retval'], POINTER(POINTER(Database)), 'ppDb')
    ),
    COMMETHOD(
        [dispid(1610809359)],
        HRESULT,
        'CreateDatabase',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'Connect'),
        (['in', 'optional'], VARIANT, 'Option'),
        (['out', 'retval'], POINTER(POINTER(Database)), 'ppDb')
    ),
    COMMETHOD(
        [dispid(1610809360), 'hidden'],
        HRESULT,
        'CreateUser',
        (['in', 'optional'], VARIANT, 'Name'),
        (['in', 'optional'], VARIANT, 'PID'),
        (['in', 'optional'], VARIANT, 'Password'),
        (['out', 'retval'], POINTER(POINTER(User)), 'ppusr')
    ),
    COMMETHOD(
        [dispid(1610809361), 'hidden'],
        HRESULT,
        'CreateGroup',
        (['in', 'optional'], VARIANT, 'Name'),
        (['in', 'optional'], VARIANT, 'PID'),
        (['out', 'retval'], POINTER(POINTER(Group)), 'ppgrp')
    ),
    COMMETHOD(
        [dispid(1610809362)],
        HRESULT,
        'OpenConnection',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], VARIANT, 'Options'),
        (['in', 'optional'], VARIANT, 'ReadOnly'),
        (['in', 'optional'], VARIANT, 'Connect'),
        (['out', 'retval'], POINTER(POINTER(Connection)), 'ppconn')
    ),
    COMMETHOD(
        [dispid(1610809363), 'propget'],
        HRESULT,
        'LoginTimeout',
        (['out', 'retval'], POINTER(c_int), 'pTimeout')
    ),
    COMMETHOD(
        [dispid(1610809363), 'propput'],
        HRESULT,
        'LoginTimeout',
        (['in'], c_int, 'pTimeout')
    ),
    COMMETHOD(
        [dispid(1610809365), 'propget'],
        HRESULT,
        'DefaultCursorDriver',
        (['out', 'retval'], POINTER(c_int), 'pCursorType')
    ),
    COMMETHOD(
        [dispid(1610809365), 'propput'],
        HRESULT,
        'DefaultCursorDriver',
        (['in'], c_int, 'pCursorType')
    ),
    COMMETHOD(
        [dispid(1610809367), 'hidden', 'propget'],
        HRESULT,
        'hEnv',
        (['out', 'retval'], POINTER(c_int), 'phEnv')
    ),
    COMMETHOD(
        [dispid(1610809368), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(c_int), 'ptype')
    ),
    COMMETHOD(
        [dispid(1610809369), 'propget'],
        HRESULT,
        'Connections',
        (['out', 'retval'], POINTER(POINTER(Connections)), 'ppcns')
    ),
]

################################################################
# code template for Workspace implementation
# class Workspace_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def UserName(self):
#         '-no docstring-'
#         #return pbstr
#
#     def _set(self, rhs):
#         '-no docstring-'
#     _30_UserName = property(fset = _set, doc = _set.__doc__)
#
#     def _set(self, rhs):
#         '-no docstring-'
#     _30_Password = property(fset = _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ps
#     def _set(self, ps):
#         '-no docstring-'
#     IsolateODBCTrans = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Databases(self):
#         '-no docstring-'
#         #return ppdbs
#
#     @property
#     def Users(self):
#         '-no docstring-'
#         #return ppusrs
#
#     @property
#     def Groups(self):
#         '-no docstring-'
#         #return ppgrps
#
#     def BeginTrans(self):
#         '-no docstring-'
#         #return 
#
#     def CommitTrans(self, Options):
#         '-no docstring-'
#         #return 
#
#     def Close(self):
#         '-no docstring-'
#         #return 
#
#     def Rollback(self):
#         '-no docstring-'
#         #return 
#
#     def OpenDatabase(self, Name, Options, ReadOnly, Connect):
#         '-no docstring-'
#         #return ppDb
#
#     def CreateDatabase(self, Name, Connect, Option):
#         '-no docstring-'
#         #return ppDb
#
#     def CreateUser(self, Name, PID, Password):
#         '-no docstring-'
#         #return ppusr
#
#     def CreateGroup(self, Name, PID):
#         '-no docstring-'
#         #return ppgrp
#
#     def OpenConnection(self, Name, Options, ReadOnly, Connect):
#         '-no docstring-'
#         #return ppconn
#
#     def _get(self):
#         '-no docstring-'
#         #return pTimeout
#     def _set(self, pTimeout):
#         '-no docstring-'
#     LoginTimeout = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pCursorType
#     def _set(self, pCursorType):
#         '-no docstring-'
#     DefaultCursorDriver = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def hEnv(self):
#         '-no docstring-'
#         #return phEnv
#
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return ptype
#
#     @property
#     def Connections(self):
#         '-no docstring-'
#         #return ppcns
#
dbLangNordic = ';LANGID=0x041D;CP=1252;COUNTRY=0'  # Constant STRING


class Recordset(_DAO):
    _case_insensitive_ = True
    _iid_ = GUID('{00000031-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_BOF(self) -> hints.Incomplete: ...
        BOF = hints.normal_property(_get_BOF)
        def _get_Bookmark(self) -> hints.Incomplete: ...
        def _set_Bookmark(self, ppsach: hints.Incomplete) -> hints.Hresult: ...
        Bookmark = hints.normal_property(_get_Bookmark, _set_Bookmark)
        def _get_Bookmarkable(self) -> hints.Incomplete: ...
        Bookmarkable = hints.normal_property(_get_Bookmarkable)
        def _get_DateCreated(self) -> hints.Incomplete: ...
        DateCreated = hints.normal_property(_get_DateCreated)
        def _get_EOF(self) -> hints.Incomplete: ...
        EOF = hints.normal_property(_get_EOF)
        def _get_Filter(self) -> hints.Incomplete: ...
        def _set_Filter(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Filter = hints.normal_property(_get_Filter, _set_Filter)
        def _get_Index(self) -> hints.Incomplete: ...
        def _set_Index(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Index = hints.normal_property(_get_Index, _set_Index)
        def _get_LastModified(self) -> hints.Incomplete: ...
        LastModified = hints.normal_property(_get_LastModified)
        def _get_LastUpdated(self) -> hints.Incomplete: ...
        LastUpdated = hints.normal_property(_get_LastUpdated)
        def _get_LockEdits(self) -> hints.Incomplete: ...
        def _set_LockEdits(self, pb: hints.Incomplete) -> hints.Hresult: ...
        LockEdits = hints.normal_property(_get_LockEdits, _set_LockEdits)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_NoMatch(self) -> hints.Incomplete: ...
        NoMatch = hints.normal_property(_get_NoMatch)
        def _get_Sort(self) -> hints.Incomplete: ...
        def _set_Sort(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Sort = hints.normal_property(_get_Sort, _set_Sort)
        def _get_Transactions(self) -> hints.Incomplete: ...
        Transactions = hints.normal_property(_get_Transactions)
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)
        def _get_RecordCount(self) -> hints.Incomplete: ...
        RecordCount = hints.normal_property(_get_RecordCount)
        def _get_Updatable(self) -> hints.Incomplete: ...
        Updatable = hints.normal_property(_get_Updatable)
        def _get_Restartable(self) -> hints.Incomplete: ...
        Restartable = hints.normal_property(_get_Restartable)
        def _get_ValidationText(self) -> hints.Incomplete: ...
        ValidationText = hints.normal_property(_get_ValidationText)
        def _get_ValidationRule(self) -> hints.Incomplete: ...
        ValidationRule = hints.normal_property(_get_ValidationRule)
        def _get_CacheStart(self) -> hints.Incomplete: ...
        def _set_CacheStart(self, ppsa: hints.Incomplete) -> hints.Hresult: ...
        CacheStart = hints.normal_property(_get_CacheStart, _set_CacheStart)
        def _get_CacheSize(self) -> hints.Incomplete: ...
        def _set_CacheSize(self, pl: hints.Incomplete) -> hints.Hresult: ...
        CacheSize = hints.normal_property(_get_CacheSize, _set_CacheSize)
        def _get_PercentPosition(self) -> hints.Incomplete: ...
        def _set_PercentPosition(self, pd: hints.Incomplete) -> hints.Hresult: ...
        PercentPosition = hints.normal_property(_get_PercentPosition, _set_PercentPosition)
        def _get_AbsolutePosition(self) -> hints.Incomplete: ...
        def _set_AbsolutePosition(self, pl: hints.Incomplete) -> hints.Hresult: ...
        AbsolutePosition = hints.normal_property(_get_AbsolutePosition, _set_AbsolutePosition)
        def _get_EditMode(self) -> hints.Incomplete: ...
        EditMode = hints.normal_property(_get_EditMode)
        def _get_ODBCFetchCount(self) -> hints.Incomplete: ...
        ODBCFetchCount = hints.normal_property(_get_ODBCFetchCount)
        def _get_ODBCFetchDelay(self) -> hints.Incomplete: ...
        ODBCFetchDelay = hints.normal_property(_get_ODBCFetchDelay)
        def _get_Parent(self) -> 'Database': ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Fields(self) -> 'Fields': ...
        Fields = hints.normal_property(_get_Fields)
        def _get_Indexes(self) -> 'Indexes': ...
        Indexes = hints.normal_property(_get_Indexes)
        def _30_CancelUpdate(self) -> hints.Hresult: ...
        def AddNew(self) -> hints.Hresult: ...
        def Close(self) -> hints.Hresult: ...
        def OpenRecordset(self, Type: hints.Incomplete = ..., Options: hints.Incomplete = ...) -> 'Recordset': ...
        def Delete(self) -> hints.Hresult: ...
        def Edit(self) -> hints.Hresult: ...
        def FindFirst(self, Criteria: hints.Incomplete) -> hints.Hresult: ...
        def FindLast(self, Criteria: hints.Incomplete) -> hints.Hresult: ...
        def FindNext(self, Criteria: hints.Incomplete) -> hints.Hresult: ...
        def FindPrevious(self, Criteria: hints.Incomplete) -> hints.Hresult: ...
        def MoveFirst(self) -> hints.Hresult: ...
        def _30_MoveLast(self) -> hints.Hresult: ...
        def MoveNext(self) -> hints.Hresult: ...
        def MovePrevious(self) -> hints.Hresult: ...
        def Seek(self, Comparison: hints.Incomplete, Key1: hints.Incomplete, Key2: hints.Incomplete = ..., Key3: hints.Incomplete = ..., Key4: hints.Incomplete = ..., Key5: hints.Incomplete = ..., Key6: hints.Incomplete = ..., Key7: hints.Incomplete = ..., Key8: hints.Incomplete = ..., Key9: hints.Incomplete = ..., Key10: hints.Incomplete = ..., Key11: hints.Incomplete = ..., Key12: hints.Incomplete = ..., Key13: hints.Incomplete = ...) -> hints.Hresult: ...
        def _30_Update(self) -> hints.Hresult: ...
        def Clone(self) -> 'Recordset': ...
        def Requery(self, NewQueryDef: hints.Incomplete = ...) -> hints.Hresult: ...
        def Move(self, Rows: hints.Incomplete, StartBookmark: hints.Incomplete = ...) -> hints.Hresult: ...
        def FillCache(self, Rows: hints.Incomplete = ..., StartBookmark: hints.Incomplete = ...) -> hints.Hresult: ...
        def CreateDynaset(self, Options: hints.Incomplete = ..., Inconsistent: hints.Incomplete = ...) -> 'Recordset': ...
        def CreateSnapshot(self, Options: hints.Incomplete = ...) -> 'Recordset': ...
        def CopyQueryDef(self) -> hints.Annotated['_QueryDef', hints.FirstComItfOf['QueryDef']]: ...
        def ListFields(self) -> 'Recordset': ...
        def ListIndexes(self) -> 'Recordset': ...
        def GetRows(self, NumRows: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_Collect(self, Item: hints.Incomplete) -> hints.Incomplete: ...
        def _set_Collect(self, Item: hints.Incomplete, pvar: hints.Incomplete) -> hints.Hresult: ...
        Collect = hints.named_property('Collect', _get_Collect, _set_Collect)
        def Cancel(self) -> hints.Hresult: ...
        def NextRecordset(self) -> hints.Incomplete: ...
        def _get_hStmt(self) -> hints.Incomplete: ...
        hStmt = hints.normal_property(_get_hStmt)
        def _get_StillExecuting(self) -> hints.Incomplete: ...
        StillExecuting = hints.normal_property(_get_StillExecuting)
        def _get_BatchSize(self) -> hints.Incomplete: ...
        def _set_BatchSize(self, pl: hints.Incomplete) -> hints.Hresult: ...
        BatchSize = hints.normal_property(_get_BatchSize, _set_BatchSize)
        def _get_BatchCollisionCount(self) -> hints.Incomplete: ...
        BatchCollisionCount = hints.normal_property(_get_BatchCollisionCount)
        def _get_BatchCollisions(self) -> hints.Incomplete: ...
        BatchCollisions = hints.normal_property(_get_BatchCollisions)
        def _get_Connection(self) -> 'Connection': ...
        def _setref_Connection(self, ppCn: hints.Incomplete) -> hints.Hresult: ...
        Connection = hints.normal_property(_get_Connection, _setref_Connection)
        def _get_RecordStatus(self) -> hints.Incomplete: ...
        RecordStatus = hints.normal_property(_get_RecordStatus)
        def _get_UpdateOptions(self) -> hints.Incomplete: ...
        def _set_UpdateOptions(self, pl: hints.Incomplete) -> hints.Hresult: ...
        UpdateOptions = hints.normal_property(_get_UpdateOptions, _set_UpdateOptions)
        def CancelUpdate(self, UpdateType: hints.Incomplete = ...) -> hints.Hresult: ...
        def Update(self, UpdateType: hints.Incomplete = ..., Force: hints.Incomplete = ...) -> hints.Hresult: ...
        def MoveLast(self, Options: hints.Incomplete = ...) -> hints.Hresult: ...


class Fields(_DynaCollection):
    _case_insensitive_ = True
    _iid_ = GUID('{00000053-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Item: hints.Incomplete) -> hints.Annotated['_Field', hints.FirstComItfOf['Field']]: ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


class Indexes(_DynaCollection):
    _case_insensitive_ = True
    _iid_ = GUID('{0000005B-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Item: hints.Incomplete) -> hints.Annotated['_Index', hints.FirstComItfOf['Index']]: ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


Recordset._methods_ = [
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'BOF',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pb')
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'Bookmark',
        (['out', 'retval'], POINTER(_midlSAFEARRAY(c_ubyte)), 'ppsach')
    ),
    COMMETHOD(
        [dispid(102), 'propput'],
        HRESULT,
        'Bookmark',
        (['in'], POINTER(_midlSAFEARRAY(c_ubyte)), 'ppsach')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'Bookmarkable',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pb')
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'DateCreated',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'EOF',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pb')
    ),
    COMMETHOD(
        [dispid(106), 'propget'],
        HRESULT,
        'Filter',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(106), 'propput'],
        HRESULT,
        'Filter',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(107), 'propget'],
        HRESULT,
        'Index',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(107), 'propput'],
        HRESULT,
        'Index',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(108), 'propget'],
        HRESULT,
        'LastModified',
        (['out', 'retval'], POINTER(_midlSAFEARRAY(c_ubyte)), 'ppsa')
    ),
    COMMETHOD(
        [dispid(109), 'propget'],
        HRESULT,
        'LastUpdated',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'LockEdits',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pb')
    ),
    COMMETHOD(
        [dispid(110), 'propput'],
        HRESULT,
        'LockEdits',
        (['in'], VARIANT_BOOL, 'pb')
    ),
    COMMETHOD(
        [dispid(111), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(112), 'propget'],
        HRESULT,
        'NoMatch',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pb')
    ),
    COMMETHOD(
        [dispid(113), 'propget'],
        HRESULT,
        'Sort',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(113), 'propput'],
        HRESULT,
        'Sort',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(114), 'propget'],
        HRESULT,
        'Transactions',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pb')
    ),
    COMMETHOD(
        [dispid(115), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(c_short), 'ps')
    ),
    COMMETHOD(
        [dispid(116), 'propget'],
        HRESULT,
        'RecordCount',
        (['out', 'retval'], POINTER(c_int), 'pl')
    ),
    COMMETHOD(
        [dispid(117), 'propget'],
        HRESULT,
        'Updatable',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pb')
    ),
    COMMETHOD(
        [dispid(118), 'propget'],
        HRESULT,
        'Restartable',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pb')
    ),
    COMMETHOD(
        [dispid(119), 'propget'],
        HRESULT,
        'ValidationText',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(120), 'propget'],
        HRESULT,
        'ValidationRule',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(121), 'propget'],
        HRESULT,
        'CacheStart',
        (['out', 'retval'], POINTER(_midlSAFEARRAY(c_ubyte)), 'ppsa')
    ),
    COMMETHOD(
        [dispid(121), 'propput'],
        HRESULT,
        'CacheStart',
        (['in'], POINTER(_midlSAFEARRAY(c_ubyte)), 'ppsa')
    ),
    COMMETHOD(
        [dispid(122), 'propget'],
        HRESULT,
        'CacheSize',
        (['out', 'retval'], POINTER(c_int), 'pl')
    ),
    COMMETHOD(
        [dispid(122), 'propput'],
        HRESULT,
        'CacheSize',
        (['in'], c_int, 'pl')
    ),
    COMMETHOD(
        [dispid(123), 'propget'],
        HRESULT,
        'PercentPosition',
        (['out', 'retval'], POINTER(c_float), 'pd')
    ),
    COMMETHOD(
        [dispid(123), 'propput'],
        HRESULT,
        'PercentPosition',
        (['in'], c_float, 'pd')
    ),
    COMMETHOD(
        [dispid(124), 'propget'],
        HRESULT,
        'AbsolutePosition',
        (['out', 'retval'], POINTER(c_int), 'pl')
    ),
    COMMETHOD(
        [dispid(124), 'propput'],
        HRESULT,
        'AbsolutePosition',
        (['in'], c_int, 'pl')
    ),
    COMMETHOD(
        [dispid(125), 'propget'],
        HRESULT,
        'EditMode',
        (['out', 'retval'], POINTER(c_short), 'pi')
    ),
    COMMETHOD(
        [dispid(126), 'hidden', 'propget'],
        HRESULT,
        'ODBCFetchCount',
        (['out', 'retval'], POINTER(c_int), 'pl')
    ),
    COMMETHOD(
        [dispid(127), 'hidden', 'propget'],
        HRESULT,
        'ODBCFetchDelay',
        (['out', 'retval'], POINTER(c_int), 'pl')
    ),
    COMMETHOD(
        [dispid(128), 'hidden', 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(Database)), 'pdb')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Fields',
        (['out', 'retval'], POINTER(POINTER(Fields)), 'ppflds')
    ),
    COMMETHOD(
        [dispid(130), 'restricted', 'propget'],
        HRESULT,
        'Indexes',
        (['out', 'retval'], POINTER(POINTER(Indexes)), 'ppidxs')
    ),
    COMMETHOD([dispid(131), 'restricted'], HRESULT, '_30_CancelUpdate'),
    COMMETHOD([dispid(132)], HRESULT, 'AddNew'),
    COMMETHOD([dispid(133)], HRESULT, 'Close'),
    COMMETHOD(
        [dispid(134)],
        HRESULT,
        'OpenRecordset',
        (['in', 'optional'], VARIANT, 'Type'),
        (['in', 'optional'], VARIANT, 'Options'),
        (['out', 'retval'], POINTER(POINTER(Recordset)), 'pprst')
    ),
    COMMETHOD([dispid(135)], HRESULT, 'Delete'),
    COMMETHOD([dispid(136)], HRESULT, 'Edit'),
    COMMETHOD(
        [dispid(137)],
        HRESULT,
        'FindFirst',
        (['in'], BSTR, 'Criteria')
    ),
    COMMETHOD(
        [dispid(138)],
        HRESULT,
        'FindLast',
        (['in'], BSTR, 'Criteria')
    ),
    COMMETHOD(
        [dispid(139)],
        HRESULT,
        'FindNext',
        (['in'], BSTR, 'Criteria')
    ),
    COMMETHOD(
        [dispid(140)],
        HRESULT,
        'FindPrevious',
        (['in'], BSTR, 'Criteria')
    ),
    COMMETHOD([dispid(141)], HRESULT, 'MoveFirst'),
    COMMETHOD([dispid(142), 'restricted'], HRESULT, '_30_MoveLast'),
    COMMETHOD([dispid(143)], HRESULT, 'MoveNext'),
    COMMETHOD([dispid(144)], HRESULT, 'MovePrevious'),
    COMMETHOD(
        [dispid(145)],
        HRESULT,
        'Seek',
        (['in'], BSTR, 'Comparison'),
        (['in'], VARIANT, 'Key1'),
        (['in', 'optional'], VARIANT, 'Key2'),
        (['in', 'optional'], VARIANT, 'Key3'),
        (['in', 'optional'], VARIANT, 'Key4'),
        (['in', 'optional'], VARIANT, 'Key5'),
        (['in', 'optional'], VARIANT, 'Key6'),
        (['in', 'optional'], VARIANT, 'Key7'),
        (['in', 'optional'], VARIANT, 'Key8'),
        (['in', 'optional'], VARIANT, 'Key9'),
        (['in', 'optional'], VARIANT, 'Key10'),
        (['in', 'optional'], VARIANT, 'Key11'),
        (['in', 'optional'], VARIANT, 'Key12'),
        (['in', 'optional'], VARIANT, 'Key13')
    ),
    COMMETHOD([dispid(146), 'restricted'], HRESULT, '_30_Update'),
    COMMETHOD(
        [dispid(147)],
        HRESULT,
        'Clone',
        (['out', 'retval'], POINTER(POINTER(Recordset)), 'pprst')
    ),
    COMMETHOD(
        [dispid(148)],
        HRESULT,
        'Requery',
        (['in', 'optional'], VARIANT, 'NewQueryDef')
    ),
    COMMETHOD(
        [dispid(149)],
        HRESULT,
        'Move',
        (['in'], c_int, 'Rows'),
        (['in', 'optional'], VARIANT, 'StartBookmark')
    ),
    COMMETHOD(
        [dispid(150)],
        HRESULT,
        'FillCache',
        (['in', 'optional'], VARIANT, 'Rows'),
        (['in', 'optional'], VARIANT, 'StartBookmark')
    ),
    COMMETHOD(
        [dispid(151), 'restricted'],
        HRESULT,
        'CreateDynaset',
        (['in', 'optional'], VARIANT, 'Options'),
        (['in', 'optional'], VARIANT, 'Inconsistent'),
        (['out', 'retval'], POINTER(POINTER(Recordset)), 'pprst')
    ),
    COMMETHOD(
        [dispid(152), 'restricted'],
        HRESULT,
        'CreateSnapshot',
        (['in', 'optional'], VARIANT, 'Options'),
        (['out', 'retval'], POINTER(POINTER(Recordset)), 'pprst')
    ),
    COMMETHOD(
        [dispid(153)],
        HRESULT,
        'CopyQueryDef',
        (['out', 'retval'], POINTER(POINTER(QueryDef)), 'ppqdf')
    ),
    COMMETHOD(
        [dispid(154), 'restricted'],
        HRESULT,
        'ListFields',
        (['out', 'retval'], POINTER(POINTER(Recordset)), 'pprst')
    ),
    COMMETHOD(
        [dispid(155), 'restricted'],
        HRESULT,
        'ListIndexes',
        (['out', 'retval'], POINTER(POINTER(Recordset)), 'pprst')
    ),
    COMMETHOD(
        [dispid(156)],
        HRESULT,
        'GetRows',
        (['in', 'optional'], VARIANT, 'NumRows'),
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(-8), 'hidden', 'propget'],
        HRESULT,
        'Collect',
        (['in'], VARIANT, 'Item'),
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(-8), 'hidden', 'propput'],
        HRESULT,
        'Collect',
        (['in'], VARIANT, 'Item'),
        (['in'], VARIANT, 'pvar')
    ),
    COMMETHOD([dispid(157)], HRESULT, 'Cancel'),
    COMMETHOD(
        [dispid(158)],
        HRESULT,
        'NextRecordset',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pb')
    ),
    COMMETHOD(
        [dispid(159), 'hidden', 'propget'],
        HRESULT,
        'hStmt',
        (['out', 'retval'], POINTER(c_int), 'phStmt')
    ),
    COMMETHOD(
        [dispid(160), 'propget'],
        HRESULT,
        'StillExecuting',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pStillExec')
    ),
    COMMETHOD(
        [dispid(161), 'propget'],
        HRESULT,
        'BatchSize',
        (['out', 'retval'], POINTER(c_int), 'pl')
    ),
    COMMETHOD(
        [dispid(161), 'propput'],
        HRESULT,
        'BatchSize',
        (['in'], c_int, 'pl')
    ),
    COMMETHOD(
        [dispid(162), 'propget'],
        HRESULT,
        'BatchCollisionCount',
        (['out', 'retval'], POINTER(c_int), 'pl')
    ),
    COMMETHOD(
        [dispid(163), 'propget'],
        HRESULT,
        'BatchCollisions',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(164), 'propget'],
        HRESULT,
        'Connection',
        (['out', 'retval'], POINTER(POINTER(Connection)), 'ppCn')
    ),
    COMMETHOD(
        [dispid(164), 'propputref'],
        HRESULT,
        'Connection',
        (['in'], POINTER(Connection), 'ppCn')
    ),
    COMMETHOD(
        [dispid(165), 'propget'],
        HRESULT,
        'RecordStatus',
        (['out', 'retval'], POINTER(c_short), 'pi')
    ),
    COMMETHOD(
        [dispid(166), 'propget'],
        HRESULT,
        'UpdateOptions',
        (['out', 'retval'], POINTER(c_int), 'pl')
    ),
    COMMETHOD(
        [dispid(166), 'propput'],
        HRESULT,
        'UpdateOptions',
        (['in'], c_int, 'pl')
    ),
    COMMETHOD(
        [dispid(167)],
        HRESULT,
        'CancelUpdate',
        (['in', 'optional'], c_int, 'UpdateType', 1)
    ),
    COMMETHOD(
        [dispid(168)],
        HRESULT,
        'Update',
        (['in', 'optional'], c_int, 'UpdateType', 1),
        (['in', 'optional'], VARIANT_BOOL, 'Force', False)
    ),
    COMMETHOD(
        [dispid(169)],
        HRESULT,
        'MoveLast',
        (['in', 'optional'], c_int, 'Options', 0)
    ),
]

################################################################
# code template for Recordset implementation
# class Recordset_Impl(object):
#     @property
#     def BOF(self):
#         '-no docstring-'
#         #return pb
#
#     def _get(self):
#         '-no docstring-'
#         #return ppsach
#     def _set(self, ppsach):
#         '-no docstring-'
#     Bookmark = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Bookmarkable(self):
#         '-no docstring-'
#         #return pb
#
#     @property
#     def DateCreated(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def EOF(self):
#         '-no docstring-'
#         #return pb
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Filter = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Index = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def LastModified(self):
#         '-no docstring-'
#         #return ppsa
#
#     @property
#     def LastUpdated(self):
#         '-no docstring-'
#         #return pvar
#
#     def _get(self):
#         '-no docstring-'
#         #return pb
#     def _set(self, pb):
#         '-no docstring-'
#     LockEdits = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return pbstr
#
#     @property
#     def NoMatch(self):
#         '-no docstring-'
#         #return pb
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Sort = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Transactions(self):
#         '-no docstring-'
#         #return pb
#
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return ps
#
#     @property
#     def RecordCount(self):
#         '-no docstring-'
#         #return pl
#
#     @property
#     def Updatable(self):
#         '-no docstring-'
#         #return pb
#
#     @property
#     def Restartable(self):
#         '-no docstring-'
#         #return pb
#
#     @property
#     def ValidationText(self):
#         '-no docstring-'
#         #return pbstr
#
#     @property
#     def ValidationRule(self):
#         '-no docstring-'
#         #return pbstr
#
#     def _get(self):
#         '-no docstring-'
#         #return ppsa
#     def _set(self, ppsa):
#         '-no docstring-'
#     CacheStart = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pl
#     def _set(self, pl):
#         '-no docstring-'
#     CacheSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pd
#     def _set(self, pd):
#         '-no docstring-'
#     PercentPosition = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pl
#     def _set(self, pl):
#         '-no docstring-'
#     AbsolutePosition = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def EditMode(self):
#         '-no docstring-'
#         #return pi
#
#     @property
#     def ODBCFetchCount(self):
#         '-no docstring-'
#         #return pl
#
#     @property
#     def ODBCFetchDelay(self):
#         '-no docstring-'
#         #return pl
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return pdb
#
#     @property
#     def Fields(self):
#         '-no docstring-'
#         #return ppflds
#
#     @property
#     def Indexes(self):
#         '-no docstring-'
#         #return ppidxs
#
#     def _30_CancelUpdate(self):
#         '-no docstring-'
#         #return 
#
#     def AddNew(self):
#         '-no docstring-'
#         #return 
#
#     def Close(self):
#         '-no docstring-'
#         #return 
#
#     def OpenRecordset(self, Type, Options):
#         '-no docstring-'
#         #return pprst
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     def Edit(self):
#         '-no docstring-'
#         #return 
#
#     def FindFirst(self, Criteria):
#         '-no docstring-'
#         #return 
#
#     def FindLast(self, Criteria):
#         '-no docstring-'
#         #return 
#
#     def FindNext(self, Criteria):
#         '-no docstring-'
#         #return 
#
#     def FindPrevious(self, Criteria):
#         '-no docstring-'
#         #return 
#
#     def MoveFirst(self):
#         '-no docstring-'
#         #return 
#
#     def _30_MoveLast(self):
#         '-no docstring-'
#         #return 
#
#     def MoveNext(self):
#         '-no docstring-'
#         #return 
#
#     def MovePrevious(self):
#         '-no docstring-'
#         #return 
#
#     def Seek(self, Comparison, Key1, Key2, Key3, Key4, Key5, Key6, Key7, Key8, Key9, Key10, Key11, Key12, Key13):
#         '-no docstring-'
#         #return 
#
#     def _30_Update(self):
#         '-no docstring-'
#         #return 
#
#     def Clone(self):
#         '-no docstring-'
#         #return pprst
#
#     def Requery(self, NewQueryDef):
#         '-no docstring-'
#         #return 
#
#     def Move(self, Rows, StartBookmark):
#         '-no docstring-'
#         #return 
#
#     def FillCache(self, Rows, StartBookmark):
#         '-no docstring-'
#         #return 
#
#     def CreateDynaset(self, Options, Inconsistent):
#         '-no docstring-'
#         #return pprst
#
#     def CreateSnapshot(self, Options):
#         '-no docstring-'
#         #return pprst
#
#     def CopyQueryDef(self):
#         '-no docstring-'
#         #return ppqdf
#
#     def ListFields(self):
#         '-no docstring-'
#         #return pprst
#
#     def ListIndexes(self):
#         '-no docstring-'
#         #return pprst
#
#     def GetRows(self, NumRows):
#         '-no docstring-'
#         #return pvar
#
#     def _get(self, Item):
#         '-no docstring-'
#         #return pvar
#     def _set(self, Item, pvar):
#         '-no docstring-'
#     Collect = property(_get, _set, doc = _set.__doc__)
#
#     def Cancel(self):
#         '-no docstring-'
#         #return 
#
#     def NextRecordset(self):
#         '-no docstring-'
#         #return pb
#
#     @property
#     def hStmt(self):
#         '-no docstring-'
#         #return phStmt
#
#     @property
#     def StillExecuting(self):
#         '-no docstring-'
#         #return pStillExec
#
#     def _get(self):
#         '-no docstring-'
#         #return pl
#     def _set(self, pl):
#         '-no docstring-'
#     BatchSize = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def BatchCollisionCount(self):
#         '-no docstring-'
#         #return pl
#
#     @property
#     def BatchCollisions(self):
#         '-no docstring-'
#         #return pvar
#
#     def Connection(self, ppCn):
#         '-no docstring-'
#         #return 
#
#     @property
#     def RecordStatus(self):
#         '-no docstring-'
#         #return pi
#
#     def _get(self):
#         '-no docstring-'
#         #return pl
#     def _set(self, pl):
#         '-no docstring-'
#     UpdateOptions = property(_get, _set, doc = _set.__doc__)
#
#     def CancelUpdate(self, UpdateType):
#         '-no docstring-'
#         #return 
#
#     def Update(self, UpdateType, Force):
#         '-no docstring-'
#         #return 
#
#     def MoveLast(self, Options):
#         '-no docstring-'
#         #return 
#
dbLangNorwDan = ';LANGID=0x0406;CP=1252;COUNTRY=0'  # Constant STRING
dbLangPolish = ';LANGID=0x0415;CP=1250;COUNTRY=0'  # Constant STRING

_Group._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809344), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809346), 'propput'],
        HRESULT,
        'PID',
        (['in'], BSTR, 'rhs')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Users',
        (['out', 'retval'], POINTER(POINTER(Users)), 'ppusrs')
    ),
    COMMETHOD(
        [dispid(1610809348), 'hidden'],
        HRESULT,
        'CreateUser',
        (['in', 'optional'], VARIANT, 'Name'),
        (['in', 'optional'], VARIANT, 'PID'),
        (['in', 'optional'], VARIANT, 'Password'),
        (['out', 'retval'], POINTER(POINTER(User)), 'ppusr')
    ),
]

################################################################
# code template for _Group implementation
# class _Group_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _set(self, rhs):
#         '-no docstring-'
#     PID = property(fset = _set, doc = _set.__doc__)
#
#     @property
#     def Users(self):
#         '-no docstring-'
#         #return ppusrs
#
#     def CreateUser(self, Name, PID, Password):
#         '-no docstring-'
#         #return ppusr
#
dbLangCyrillic = ';LANGID=0x0419;CP=1251;COUNTRY=0'  # Constant STRING
dbLangSpanish = ';LANGID=0x040A;CP=1252;COUNTRY=0'  # Constant STRING
dbLangSwedFin = ';LANGID=0x041D;CP=1252;COUNTRY=0'  # Constant STRING
dbLangTurkish = ';LANGID=0x041F;CP=1254;COUNTRY=0'  # Constant STRING


class Recordsets(_Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{00000033-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Item: hints.Incomplete) -> 'Recordset': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


Connection._methods_ = [
    COMMETHOD(
        [dispid(1610743808), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743809), 'propget'],
        HRESULT,
        'Connect',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743810), 'propget'],
        HRESULT,
        'Database',
        (['out', 'retval'], POINTER(POINTER(Database)), 'ppDb')
    ),
    COMMETHOD(
        [dispid(1610743811), 'hidden', 'propget'],
        HRESULT,
        'hDbc',
        (['out', 'retval'], POINTER(c_int), 'phDbc')
    ),
    COMMETHOD(
        [dispid(1610743812), 'propget'],
        HRESULT,
        'QueryTimeout',
        (['out', 'retval'], POINTER(c_short), 'pSeconds')
    ),
    COMMETHOD(
        [dispid(1610743812), 'propput'],
        HRESULT,
        'QueryTimeout',
        (['in'], c_short, 'pSeconds')
    ),
    COMMETHOD(
        [dispid(1610743814), 'propget'],
        HRESULT,
        'Transactions',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pb')
    ),
    COMMETHOD(
        [dispid(1610743815), 'propget'],
        HRESULT,
        'RecordsAffected',
        (['out', 'retval'], POINTER(c_int), 'pRecords')
    ),
    COMMETHOD(
        [dispid(1610743816), 'propget'],
        HRESULT,
        'StillExecuting',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pStillExec')
    ),
    COMMETHOD(
        [dispid(1610743817), 'propget'],
        HRESULT,
        'Updatable',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pStillExec')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'QueryDefs',
        (['out', 'retval'], POINTER(POINTER(QueryDefs)), 'ppqdfs')
    ),
    COMMETHOD(
        [dispid(1610743819), 'propget'],
        HRESULT,
        'Recordsets',
        (['out', 'retval'], POINTER(POINTER(Recordsets)), 'pprsts')
    ),
    COMMETHOD([dispid(1610743820)], HRESULT, 'Cancel'),
    COMMETHOD([dispid(1610743821)], HRESULT, 'Close'),
    COMMETHOD(
        [dispid(1610743822)],
        HRESULT,
        'CreateQueryDef',
        (['in', 'optional'], VARIANT, 'Name'),
        (['in', 'optional'], VARIANT, 'SQLText'),
        (['out', 'retval'], POINTER(POINTER(QueryDef)), 'ppqdf')
    ),
    COMMETHOD(
        [dispid(1610743823)],
        HRESULT,
        'Execute',
        (['in'], BSTR, 'Query'),
        (['in', 'optional'], VARIANT, 'Options')
    ),
    COMMETHOD(
        [dispid(1610743824)],
        HRESULT,
        'OpenRecordset',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], VARIANT, 'Type'),
        (['in', 'optional'], VARIANT, 'Options'),
        (['in', 'optional'], VARIANT, 'LockEdit'),
        (['out', 'retval'], POINTER(POINTER(Recordset)), 'pprst')
    ),
]

################################################################
# code template for Connection implementation
# class Connection_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return pbstr
#
#     @property
#     def Connect(self):
#         '-no docstring-'
#         #return pbstr
#
#     @property
#     def Database(self):
#         '-no docstring-'
#         #return ppDb
#
#     @property
#     def hDbc(self):
#         '-no docstring-'
#         #return phDbc
#
#     def _get(self):
#         '-no docstring-'
#         #return pSeconds
#     def _set(self, pSeconds):
#         '-no docstring-'
#     QueryTimeout = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Transactions(self):
#         '-no docstring-'
#         #return pb
#
#     @property
#     def RecordsAffected(self):
#         '-no docstring-'
#         #return pRecords
#
#     @property
#     def StillExecuting(self):
#         '-no docstring-'
#         #return pStillExec
#
#     @property
#     def Updatable(self):
#         '-no docstring-'
#         #return pStillExec
#
#     @property
#     def QueryDefs(self):
#         '-no docstring-'
#         #return ppqdfs
#
#     @property
#     def Recordsets(self):
#         '-no docstring-'
#         #return pprsts
#
#     def Cancel(self):
#         '-no docstring-'
#         #return 
#
#     def Close(self):
#         '-no docstring-'
#         #return 
#
#     def CreateQueryDef(self, Name, SQLText):
#         '-no docstring-'
#         #return ppqdf
#
#     def Execute(self, Query, Options):
#         '-no docstring-'
#         #return 
#
#     def OpenRecordset(self, Name, Type, Options, LockEdit):
#         '-no docstring-'
#         #return pprst
#


class Field(CoClass):
    _reg_clsid_ = GUID('{A1EB89D6-0A9C-4575-A0AE-654A990A454C}')
    _idlflags_ = ['licensed']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4AC9E1DA-5BAD-4AC7-86E3-24F4CDCECA28}', 12, 0)


class _Field(_DAO):
    _case_insensitive_ = True
    _iid_ = GUID('{00000051-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_CollatingOrder(self) -> hints.Incomplete: ...
        CollatingOrder = hints.normal_property(_get_CollatingOrder)
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, ps: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_Size(self) -> hints.Incomplete: ...
        def _set_Size(self, pl: hints.Incomplete) -> hints.Hresult: ...
        Size = hints.normal_property(_get_Size, _set_Size)
        def _get_SourceField(self) -> hints.Incomplete: ...
        SourceField = hints.normal_property(_get_SourceField)
        def _get_SourceTable(self) -> hints.Incomplete: ...
        SourceTable = hints.normal_property(_get_SourceTable)
        def _get_Value(self) -> hints.Incomplete: ...
        def _set_Value(self, pvar: hints.Incomplete) -> hints.Hresult: ...
        Value = hints.normal_property(_get_Value, _set_Value)
        def _get_Attributes(self) -> hints.Incomplete: ...
        def _set_Attributes(self, pl: hints.Incomplete) -> hints.Hresult: ...
        Attributes = hints.normal_property(_get_Attributes, _set_Attributes)
        def _get_OrdinalPosition(self) -> hints.Incomplete: ...
        def _set_OrdinalPosition(self, ps: hints.Incomplete) -> hints.Hresult: ...
        OrdinalPosition = hints.normal_property(_get_OrdinalPosition, _set_OrdinalPosition)
        def _get_ValidationText(self) -> hints.Incomplete: ...
        def _set_ValidationText(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        ValidationText = hints.normal_property(_get_ValidationText, _set_ValidationText)
        def _get_ValidateOnSet(self) -> hints.Incomplete: ...
        def _set_ValidateOnSet(self, pb: hints.Incomplete) -> hints.Hresult: ...
        ValidateOnSet = hints.normal_property(_get_ValidateOnSet, _set_ValidateOnSet)
        def _get_ValidationRule(self) -> hints.Incomplete: ...
        def _set_ValidationRule(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        ValidationRule = hints.normal_property(_get_ValidationRule, _set_ValidationRule)
        def _get_DefaultValue(self) -> hints.Incomplete: ...
        def _set_DefaultValue(self, pvar: hints.Incomplete) -> hints.Hresult: ...
        DefaultValue = hints.normal_property(_get_DefaultValue, _set_DefaultValue)
        def _get_Required(self) -> hints.Incomplete: ...
        def _set_Required(self, pb: hints.Incomplete) -> hints.Hresult: ...
        Required = hints.normal_property(_get_Required, _set_Required)
        def _get_AllowZeroLength(self) -> hints.Incomplete: ...
        def _set_AllowZeroLength(self, pb: hints.Incomplete) -> hints.Hresult: ...
        AllowZeroLength = hints.normal_property(_get_AllowZeroLength, _set_AllowZeroLength)
        def _get_DataUpdatable(self) -> hints.Incomplete: ...
        DataUpdatable = hints.normal_property(_get_DataUpdatable)
        def _get_ForeignName(self) -> hints.Incomplete: ...
        def _set_ForeignName(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        ForeignName = hints.normal_property(_get_ForeignName, _set_ForeignName)
        def AppendChunk(self, Val: hints.Incomplete) -> hints.Hresult: ...
        def GetChunk(self, Offset: hints.Incomplete, Bytes: hints.Incomplete) -> hints.Incomplete: ...
        def _30_FieldSize(self) -> hints.Incomplete: ...
        def CreateProperty(self, Name: hints.Incomplete = ..., Type: hints.Incomplete = ..., Value: hints.Incomplete = ..., DDL: hints.Incomplete = ...) -> 'Property': ...
        def _get_CollectionIndex(self) -> hints.Incomplete: ...
        CollectionIndex = hints.normal_property(_get_CollectionIndex)
        def _get_OriginalValue(self) -> hints.Incomplete: ...
        OriginalValue = hints.normal_property(_get_OriginalValue)
        def _get_VisibleValue(self) -> hints.Incomplete: ...
        VisibleValue = hints.normal_property(_get_VisibleValue)
        def _get_FieldSize(self) -> hints.Incomplete: ...
        FieldSize = hints.normal_property(_get_FieldSize)


Field._com_interfaces_ = [_Field]

_Relation._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809344), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809346), 'propget'],
        HRESULT,
        'Table',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809346), 'propput'],
        HRESULT,
        'Table',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809348), 'propget'],
        HRESULT,
        'ForeignTable',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809348), 'propput'],
        HRESULT,
        'ForeignTable',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809350), 'propget'],
        HRESULT,
        'Attributes',
        (['out', 'retval'], POINTER(c_int), 'pl')
    ),
    COMMETHOD(
        [dispid(1610809350), 'propput'],
        HRESULT,
        'Attributes',
        (['in'], c_int, 'pl')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Fields',
        (['out', 'retval'], POINTER(POINTER(Fields)), 'ppflds')
    ),
    COMMETHOD(
        [dispid(1610809353)],
        HRESULT,
        'CreateField',
        (['in', 'optional'], VARIANT, 'Name'),
        (['in', 'optional'], VARIANT, 'Type'),
        (['in', 'optional'], VARIANT, 'Size'),
        (['out', 'retval'], POINTER(POINTER(Field)), 'ppfld')
    ),
    COMMETHOD(
        [dispid(1610809354), 'propget'],
        HRESULT,
        'PartialReplica',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfPartialReplica')
    ),
    COMMETHOD(
        [dispid(1610809354), 'propput'],
        HRESULT,
        'PartialReplica',
        (['in'], VARIANT_BOOL, 'pfPartialReplica')
    ),
]

################################################################
# code template for _Relation implementation
# class _Relation_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Table = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     ForeignTable = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pl
#     def _set(self, pl):
#         '-no docstring-'
#     Attributes = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Fields(self):
#         '-no docstring-'
#         #return ppflds
#
#     def CreateField(self, Name, Type, Size):
#         '-no docstring-'
#         #return ppfld
#
#     def _get(self):
#         '-no docstring-'
#         #return pfPartialReplica
#     def _set(self, pfPartialReplica):
#         '-no docstring-'
#     PartialReplica = property(_get, _set, doc = _set.__doc__)
#
dbLangJapanese = ';LANGID=0x0411;CP=932;COUNTRY=0'  # Constant STRING
dbLangChineseSimplified = ';LANGID=0x0804;CP=936;COUNTRY=0'  # Constant STRING


class Property(_DAO):
    _case_insensitive_ = True
    _iid_ = GUID('{00000027-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Value(self) -> hints.Incomplete: ...
        def _set_Value(self, pval: hints.Incomplete) -> hints.Hresult: ...
        Value = hints.normal_property(_get_Value, _set_Value)
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, ptype: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)
        def _get_Inherited(self) -> hints.Incomplete: ...
        Inherited = hints.normal_property(_get_Inherited)


Document._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809345), 'hidden', 'propget'],
        HRESULT,
        'Owner',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809345), 'hidden', 'propput'],
        HRESULT,
        'Owner',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809347), 'propget'],
        HRESULT,
        'Container',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809348), 'hidden', 'propget'],
        HRESULT,
        'UserName',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809348), 'hidden', 'propput'],
        HRESULT,
        'UserName',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809350), 'hidden', 'propget'],
        HRESULT,
        'Permissions',
        (['out', 'retval'], POINTER(c_int), 'pl')
    ),
    COMMETHOD(
        [dispid(1610809350), 'hidden', 'propput'],
        HRESULT,
        'Permissions',
        (['in'], c_int, 'pl')
    ),
    COMMETHOD(
        [dispid(1610809352), 'propget'],
        HRESULT,
        'DateCreated',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(1610809353), 'propget'],
        HRESULT,
        'LastUpdated',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(1610809354), 'hidden', 'propget'],
        HRESULT,
        'AllPermissions',
        (['out', 'retval'], POINTER(c_int), 'pl')
    ),
    COMMETHOD(
        [dispid(1610809355)],
        HRESULT,
        'CreateProperty',
        (['in', 'optional'], VARIANT, 'Name'),
        (['in', 'optional'], VARIANT, 'Type'),
        (['in', 'optional'], VARIANT, 'Value'),
        (['in', 'optional'], VARIANT, 'DDL'),
        (['out', 'retval'], POINTER(POINTER(Property)), 'pprp')
    ),
]

################################################################
# code template for Document implementation
# class Document_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return pbstr
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Owner = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Container(self):
#         '-no docstring-'
#         #return pbstr
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     UserName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pl
#     def _set(self, pl):
#         '-no docstring-'
#     Permissions = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def DateCreated(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def LastUpdated(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def AllPermissions(self):
#         '-no docstring-'
#         #return pl
#
#     def CreateProperty(self, Name, Type, Value, DDL):
#         '-no docstring-'
#         #return pprp
#
dbLangChineseTraditional = ';LANGID=0x0404;CP=950;COUNTRY=0'  # Constant STRING
dbLangKorean = ';LANGID=0x0412;CP=949;COUNTRY=0'  # Constant STRING


class Index(CoClass):
    _reg_clsid_ = GUID('{8D4F994C-EBBE-4F8D-BA4B-AE20CD36E72D}')
    _idlflags_ = ['licensed']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4AC9E1DA-5BAD-4AC7-86E3-24F4CDCECA28}', 12, 0)


class _Index(_DAO):
    _case_insensitive_ = True
    _iid_ = GUID('{00000059-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_Foreign(self) -> hints.Incomplete: ...
        Foreign = hints.normal_property(_get_Foreign)
        def _get_Unique(self) -> hints.Incomplete: ...
        def _set_Unique(self, pb: hints.Incomplete) -> hints.Hresult: ...
        Unique = hints.normal_property(_get_Unique, _set_Unique)
        def _get_Clustered(self) -> hints.Incomplete: ...
        def _set_Clustered(self, pb: hints.Incomplete) -> hints.Hresult: ...
        Clustered = hints.normal_property(_get_Clustered, _set_Clustered)
        def _get_Required(self) -> hints.Incomplete: ...
        def _set_Required(self, pb: hints.Incomplete) -> hints.Hresult: ...
        Required = hints.normal_property(_get_Required, _set_Required)
        def _get_IgnoreNulls(self) -> hints.Incomplete: ...
        def _set_IgnoreNulls(self, pb: hints.Incomplete) -> hints.Hresult: ...
        IgnoreNulls = hints.normal_property(_get_IgnoreNulls, _set_IgnoreNulls)
        def _get_Primary(self) -> hints.Incomplete: ...
        def _set_Primary(self, pb: hints.Incomplete) -> hints.Hresult: ...
        Primary = hints.normal_property(_get_Primary, _set_Primary)
        def _get_DistinctCount(self) -> hints.Incomplete: ...
        DistinctCount = hints.normal_property(_get_DistinctCount)
        def _get_Fields(self) -> hints.Incomplete: ...
        def _set_Fields(self, pv: hints.Incomplete) -> hints.Hresult: ...
        Fields = hints.normal_property(_get_Fields, _set_Fields)
        def CreateField(self, Name: hints.Incomplete = ..., Type: hints.Incomplete = ..., Size: hints.Incomplete = ...) -> hints.Annotated['_Field', hints.FirstComItfOf['Field']]: ...
        def CreateProperty(self, Name: hints.Incomplete = ..., Type: hints.Incomplete = ..., Value: hints.Incomplete = ..., DDL: hints.Incomplete = ...) -> 'Property': ...


Index._com_interfaces_ = [_Index]
dbLangThai = ';LANGID=0x041E;CP=874;COUNTRY=0'  # Constant STRING
dbLangSlovenian = ';LANGID=0x0424;CP=1250;COUNTRY=0'  # Constant STRING
dbLangJapaneseRadicalStrokeCount = ';LANGID=0x00040411;CP=65001;COUNTRY=0'  # Constant STRING
dbLangHindi = ';LANGID=0x00000439;CP=65001;COUNTRY=0'  # Constant STRING


class TableDefs(_DynaCollection):
    _case_insensitive_ = True
    _iid_ = GUID('{0000004B-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Item: hints.Incomplete) -> hints.Annotated['_TableDef', hints.FirstComItfOf['TableDef']]: ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


class TableDef(CoClass):
    _reg_clsid_ = GUID('{367E582C-F71C-4BF9-AA1B-9F62B793E9C5}')
    _idlflags_ = ['licensed']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4AC9E1DA-5BAD-4AC7-86E3-24F4CDCECA28}', 12, 0)


class _TableDef(_DAO):
    _case_insensitive_ = True
    _iid_ = GUID('{00000049-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Attributes(self) -> hints.Incomplete: ...
        def _set_Attributes(self, pl: hints.Incomplete) -> hints.Hresult: ...
        Attributes = hints.normal_property(_get_Attributes, _set_Attributes)
        def _get_Connect(self) -> hints.Incomplete: ...
        def _set_Connect(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Connect = hints.normal_property(_get_Connect, _set_Connect)
        def _get_DateCreated(self) -> hints.Incomplete: ...
        DateCreated = hints.normal_property(_get_DateCreated)
        def _get_LastUpdated(self) -> hints.Incomplete: ...
        LastUpdated = hints.normal_property(_get_LastUpdated)
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_SourceTableName(self) -> hints.Incomplete: ...
        def _set_SourceTableName(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        SourceTableName = hints.normal_property(_get_SourceTableName, _set_SourceTableName)
        def _get_Updatable(self) -> hints.Incomplete: ...
        Updatable = hints.normal_property(_get_Updatable)
        def _get_ValidationText(self) -> hints.Incomplete: ...
        def _set_ValidationText(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        ValidationText = hints.normal_property(_get_ValidationText, _set_ValidationText)
        def _get_ValidationRule(self) -> hints.Incomplete: ...
        def _set_ValidationRule(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        ValidationRule = hints.normal_property(_get_ValidationRule, _set_ValidationRule)
        def _get_RecordCount(self) -> hints.Incomplete: ...
        RecordCount = hints.normal_property(_get_RecordCount)
        def _get_Fields(self) -> 'Fields': ...
        Fields = hints.normal_property(_get_Fields)
        def _get_Indexes(self) -> 'Indexes': ...
        Indexes = hints.normal_property(_get_Indexes)
        def OpenRecordset(self, Type: hints.Incomplete = ..., Options: hints.Incomplete = ...) -> 'Recordset': ...
        def RefreshLink(self) -> hints.Hresult: ...
        def CreateField(self, Name: hints.Incomplete = ..., Type: hints.Incomplete = ..., Size: hints.Incomplete = ...) -> hints.Annotated['_Field', hints.FirstComItfOf['Field']]: ...
        def CreateIndex(self, Name: hints.Incomplete = ...) -> hints.Annotated['_Index', hints.FirstComItfOf['Index']]: ...
        def CreateProperty(self, Name: hints.Incomplete = ..., Type: hints.Incomplete = ..., Value: hints.Incomplete = ..., DDL: hints.Incomplete = ...) -> 'Property': ...
        def _get_ConflictTable(self) -> hints.Incomplete: ...
        ConflictTable = hints.normal_property(_get_ConflictTable)
        def _get_ReplicaFilter(self) -> hints.Incomplete: ...
        def _set_ReplicaFilter(self, pFilter: hints.Incomplete) -> hints.Hresult: ...
        ReplicaFilter = hints.normal_property(_get_ReplicaFilter, _set_ReplicaFilter)


TableDef._com_interfaces_ = [_TableDef]

TableDefs._methods_ = [
    COMMETHOD(
        [dispid(0), 'hidden', 'propget'],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Item'),
        (['out', 'retval'], POINTER(POINTER(TableDef)), 'pptdf')
    ),
]

################################################################
# code template for TableDefs implementation
# class TableDefs_Impl(object):
#     @property
#     def Item(self, Item):
#         '-no docstring-'
#         #return pptdf
#


class _DBEngine(_DAO):
    _case_insensitive_ = True
    _iid_ = GUID('{00000021-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Version(self) -> hints.Incomplete: ...
        Version = hints.normal_property(_get_Version)
        def _get_IniPath(self) -> hints.Incomplete: ...
        def _set_IniPath(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        IniPath = hints.normal_property(_get_IniPath, _set_IniPath)
        def _set_DefaultUser(self, rhs: hints.Incomplete) -> hints.Hresult: ...
        DefaultUser = hints.normal_property(fset=_set_DefaultUser)
        def _set_DefaultPassword(self, rhs: hints.Incomplete) -> hints.Hresult: ...
        DefaultPassword = hints.normal_property(fset=_set_DefaultPassword)
        def _get_LoginTimeout(self) -> hints.Incomplete: ...
        def _set_LoginTimeout(self, ps: hints.Incomplete) -> hints.Hresult: ...
        LoginTimeout = hints.normal_property(_get_LoginTimeout, _set_LoginTimeout)
        def _get_Workspaces(self) -> 'Workspaces': ...
        Workspaces = hints.normal_property(_get_Workspaces)
        def _get_Errors(self) -> 'Errors': ...
        Errors = hints.normal_property(_get_Errors)
        def Idle(self, Action: hints.Incomplete = ...) -> hints.Hresult: ...
        def CompactDatabase(self, SrcName: hints.Incomplete, DstName: hints.Incomplete, DstLocale: hints.Incomplete = ..., Options: hints.Incomplete = ..., SrcLocale: hints.Incomplete = ...) -> hints.Hresult: ...
        def RepairDatabase(self, Name: hints.Incomplete) -> hints.Hresult: ...
        def RegisterDatabase(self, Dsn: hints.Incomplete, Driver: hints.Incomplete, Silent: hints.Incomplete, Attributes: hints.Incomplete) -> hints.Hresult: ...
        def _30_CreateWorkspace(self, Name: hints.Incomplete, UserName: hints.Incomplete, Password: hints.Incomplete) -> 'Workspace': ...
        def OpenDatabase(self, Name: hints.Incomplete, Options: hints.Incomplete = ..., ReadOnly: hints.Incomplete = ..., Connect: hints.Incomplete = ...) -> 'Database': ...
        def CreateDatabase(self, Name: hints.Incomplete, Locale: hints.Incomplete, Option: hints.Incomplete = ...) -> 'Database': ...
        def FreeLocks(self) -> hints.Hresult: ...
        def BeginTrans(self) -> hints.Hresult: ...
        def CommitTrans(self, Option: hints.Incomplete = ...) -> hints.Hresult: ...
        def Rollback(self) -> hints.Hresult: ...
        def SetDefaultWorkspace(self, Name: hints.Incomplete, Password: hints.Incomplete) -> hints.Hresult: ...
        def SetDataAccessOption(self, Option: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...
        def ISAMStats(self, StatNum: hints.Incomplete, Reset: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_SystemDB(self) -> hints.Incomplete: ...
        def _set_SystemDB(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        SystemDB = hints.normal_property(_get_SystemDB, _set_SystemDB)
        def CreateWorkspace(self, Name: hints.Incomplete, UserName: hints.Incomplete, Password: hints.Incomplete, UseType: hints.Incomplete = ...) -> 'Workspace': ...
        def OpenConnection(self, Name: hints.Incomplete, Options: hints.Incomplete = ..., ReadOnly: hints.Incomplete = ..., Connect: hints.Incomplete = ...) -> 'Connection': ...
        def _get_DefaultType(self) -> hints.Incomplete: ...
        def _set_DefaultType(self, Option: hints.Incomplete) -> hints.Hresult: ...
        DefaultType = hints.normal_property(_get_DefaultType, _set_DefaultType)
        def SetOption(self, Option: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...


class Errors(_Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{00000025-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Item: hints.Incomplete) -> 'Error': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


_DBEngine._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Version',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propget'],
        HRESULT,
        'IniPath',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propput'],
        HRESULT,
        'IniPath',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809347), 'propput'],
        HRESULT,
        'DefaultUser',
        (['in'], BSTR, 'rhs')
    ),
    COMMETHOD(
        [dispid(1610809348), 'propput'],
        HRESULT,
        'DefaultPassword',
        (['in'], BSTR, 'rhs')
    ),
    COMMETHOD(
        [dispid(1610809349), 'propget'],
        HRESULT,
        'LoginTimeout',
        (['out', 'retval'], POINTER(c_short), 'ps')
    ),
    COMMETHOD(
        [dispid(1610809349), 'propput'],
        HRESULT,
        'LoginTimeout',
        (['in'], c_short, 'ps')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Workspaces',
        (['out', 'retval'], POINTER(POINTER(Workspaces)), 'ppworks')
    ),
    COMMETHOD(
        [dispid(1610809352), 'propget'],
        HRESULT,
        'Errors',
        (['out', 'retval'], POINTER(POINTER(Errors)), 'pperrs')
    ),
    COMMETHOD(
        [dispid(1610809353)],
        HRESULT,
        'Idle',
        (['in', 'optional'], VARIANT, 'Action')
    ),
    COMMETHOD(
        [dispid(1610809354)],
        HRESULT,
        'CompactDatabase',
        (['in'], BSTR, 'SrcName'),
        (['in'], BSTR, 'DstName'),
        (['in', 'optional'], VARIANT, 'DstLocale'),
        (['in', 'optional'], VARIANT, 'Options'),
        (['in', 'optional'], VARIANT, 'SrcLocale')
    ),
    COMMETHOD(
        [dispid(1610809355), 'hidden'],
        HRESULT,
        'RepairDatabase',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(1610809356)],
        HRESULT,
        'RegisterDatabase',
        (['in'], BSTR, 'Dsn'),
        (['in'], BSTR, 'Driver'),
        (['in'], VARIANT_BOOL, 'Silent'),
        (['in'], BSTR, 'Attributes')
    ),
    COMMETHOD(
        [dispid(1610809357), 'restricted'],
        HRESULT,
        '_30_CreateWorkspace',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'UserName'),
        (['in'], BSTR, 'Password'),
        (['out', 'retval'], POINTER(POINTER(Workspace)), 'ppwrk')
    ),
    COMMETHOD(
        [dispid(1610809358)],
        HRESULT,
        'OpenDatabase',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], VARIANT, 'Options'),
        (['in', 'optional'], VARIANT, 'ReadOnly'),
        (['in', 'optional'], VARIANT, 'Connect'),
        (['out', 'retval'], POINTER(POINTER(Database)), 'ppDb')
    ),
    COMMETHOD(
        [dispid(1610809359)],
        HRESULT,
        'CreateDatabase',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'Locale'),
        (['in', 'optional'], VARIANT, 'Option'),
        (['out', 'retval'], POINTER(POINTER(Database)), 'ppDb')
    ),
    COMMETHOD([dispid(1610809360), 'restricted'], HRESULT, 'FreeLocks'),
    COMMETHOD([dispid(1610809361)], HRESULT, 'BeginTrans'),
    COMMETHOD(
        [dispid(1610809362)],
        HRESULT,
        'CommitTrans',
        (['in', 'optional'], c_int, 'Option', 0)
    ),
    COMMETHOD([dispid(1610809363)], HRESULT, 'Rollback'),
    COMMETHOD(
        [dispid(1610809364), 'restricted'],
        HRESULT,
        'SetDefaultWorkspace',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'Password')
    ),
    COMMETHOD(
        [dispid(1610809365), 'restricted'],
        HRESULT,
        'SetDataAccessOption',
        (['in'], c_short, 'Option'),
        (['in'], VARIANT, 'Value')
    ),
    COMMETHOD(
        [dispid(1610809366), 'hidden'],
        HRESULT,
        'ISAMStats',
        (['in'], c_int, 'StatNum'),
        (['in', 'optional'], VARIANT, 'Reset'),
        (['out', 'retval'], POINTER(c_int), 'pl')
    ),
    COMMETHOD(
        [dispid(1610809367), 'hidden', 'propget'],
        HRESULT,
        'SystemDB',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809367), 'hidden', 'propput'],
        HRESULT,
        'SystemDB',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809369)],
        HRESULT,
        'CreateWorkspace',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'UserName'),
        (['in'], BSTR, 'Password'),
        (['in', 'optional'], VARIANT, 'UseType'),
        (['out', 'retval'], POINTER(POINTER(Workspace)), 'ppwrk')
    ),
    COMMETHOD(
        [dispid(1610809370)],
        HRESULT,
        'OpenConnection',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], VARIANT, 'Options'),
        (['in', 'optional'], VARIANT, 'ReadOnly'),
        (['in', 'optional'], VARIANT, 'Connect'),
        (['out', 'retval'], POINTER(POINTER(Connection)), 'ppconn')
    ),
    COMMETHOD(
        [dispid(1610809371), 'propget'],
        HRESULT,
        'DefaultType',
        (['out', 'retval'], POINTER(c_int), 'Option')
    ),
    COMMETHOD(
        [dispid(1610809371), 'propput'],
        HRESULT,
        'DefaultType',
        (['in'], c_int, 'Option')
    ),
    COMMETHOD(
        [dispid(1610809373)],
        HRESULT,
        'SetOption',
        (['in'], c_int, 'Option'),
        (['in'], VARIANT, 'Value')
    ),
]

################################################################
# code template for _DBEngine implementation
# class _DBEngine_Impl(object):
#     @property
#     def Version(self):
#         '-no docstring-'
#         #return pbstr
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     IniPath = property(_get, _set, doc = _set.__doc__)
#
#     def _set(self, rhs):
#         '-no docstring-'
#     DefaultUser = property(fset = _set, doc = _set.__doc__)
#
#     def _set(self, rhs):
#         '-no docstring-'
#     DefaultPassword = property(fset = _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ps
#     def _set(self, ps):
#         '-no docstring-'
#     LoginTimeout = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Workspaces(self):
#         '-no docstring-'
#         #return ppworks
#
#     @property
#     def Errors(self):
#         '-no docstring-'
#         #return pperrs
#
#     def Idle(self, Action):
#         '-no docstring-'
#         #return 
#
#     def CompactDatabase(self, SrcName, DstName, DstLocale, Options, SrcLocale):
#         '-no docstring-'
#         #return 
#
#     def RepairDatabase(self, Name):
#         '-no docstring-'
#         #return 
#
#     def RegisterDatabase(self, Dsn, Driver, Silent, Attributes):
#         '-no docstring-'
#         #return 
#
#     def _30_CreateWorkspace(self, Name, UserName, Password):
#         '-no docstring-'
#         #return ppwrk
#
#     def OpenDatabase(self, Name, Options, ReadOnly, Connect):
#         '-no docstring-'
#         #return ppDb
#
#     def CreateDatabase(self, Name, Locale, Option):
#         '-no docstring-'
#         #return ppDb
#
#     def FreeLocks(self):
#         '-no docstring-'
#         #return 
#
#     def BeginTrans(self):
#         '-no docstring-'
#         #return 
#
#     def CommitTrans(self, Option):
#         '-no docstring-'
#         #return 
#
#     def Rollback(self):
#         '-no docstring-'
#         #return 
#
#     def SetDefaultWorkspace(self, Name, Password):
#         '-no docstring-'
#         #return 
#
#     def SetDataAccessOption(self, Option, Value):
#         '-no docstring-'
#         #return 
#
#     def ISAMStats(self, StatNum, Reset):
#         '-no docstring-'
#         #return pl
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     SystemDB = property(_get, _set, doc = _set.__doc__)
#
#     def CreateWorkspace(self, Name, UserName, Password, UseType):
#         '-no docstring-'
#         #return ppwrk
#
#     def OpenConnection(self, Name, Options, ReadOnly, Connect):
#         '-no docstring-'
#         #return ppconn
#
#     def _get(self):
#         '-no docstring-'
#         #return Option
#     def _set(self, Option):
#         '-no docstring-'
#     DefaultType = property(_get, _set, doc = _set.__doc__)
#
#     def SetOption(self, Option, Value):
#         '-no docstring-'
#         #return 
#

Databases._methods_ = [
    COMMETHOD(
        [dispid(0), 'hidden', 'propget'],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Item'),
        (['out', 'retval'], POINTER(POINTER(Database)), 'ppDb')
    ),
]

################################################################
# code template for Databases implementation
# class Databases_Impl(object):
#     @property
#     def Item(self, Item):
#         '-no docstring-'
#         #return ppDb
#


class ComplexType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{0000009D-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Fields(self) -> 'Fields': ...
        Fields = hints.normal_property(_get_Fields)


ComplexType._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Fields',
        (['out', 'retval'], POINTER(POINTER(Fields)), 'ppflds')
    ),
]

################################################################
# code template for ComplexType implementation
# class ComplexType_Impl(object):
#     @property
#     def Fields(self):
#         '-no docstring-'
#         #return ppflds
#


class DBEngine(CoClass):
    _reg_clsid_ = GUID('{CD7791B9-43FD-42C5-AE42-8DD2811F0419}')
    _idlflags_ = ['appobject', 'licensed']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4AC9E1DA-5BAD-4AC7-86E3-24F4CDCECA28}', 12, 0)


DBEngine._com_interfaces_ = [_DBEngine]

_TableDef._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Attributes',
        (['out', 'retval'], POINTER(c_int), 'pl')
    ),
    COMMETHOD(
        [dispid(1610809344), 'propput'],
        HRESULT,
        'Attributes',
        (['in'], c_int, 'pl')
    ),
    COMMETHOD(
        [dispid(1610809346), 'propget'],
        HRESULT,
        'Connect',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809346), 'propput'],
        HRESULT,
        'Connect',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809348), 'propget'],
        HRESULT,
        'DateCreated',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(1610809349), 'propget'],
        HRESULT,
        'LastUpdated',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(1610809350), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809350), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809352), 'propget'],
        HRESULT,
        'SourceTableName',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809352), 'propput'],
        HRESULT,
        'SourceTableName',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809354), 'propget'],
        HRESULT,
        'Updatable',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pb')
    ),
    COMMETHOD(
        [dispid(1610809355), 'propget'],
        HRESULT,
        'ValidationText',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809355), 'propput'],
        HRESULT,
        'ValidationText',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809357), 'propget'],
        HRESULT,
        'ValidationRule',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809357), 'propput'],
        HRESULT,
        'ValidationRule',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809359), 'propget'],
        HRESULT,
        'RecordCount',
        (['out', 'retval'], POINTER(c_int), 'pl')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Fields',
        (['out', 'retval'], POINTER(POINTER(Fields)), 'ppflds')
    ),
    COMMETHOD(
        [dispid(1610809361), 'propget'],
        HRESULT,
        'Indexes',
        (['out', 'retval'], POINTER(POINTER(Indexes)), 'ppidxs')
    ),
    COMMETHOD(
        [dispid(1610809362)],
        HRESULT,
        'OpenRecordset',
        (['in', 'optional'], VARIANT, 'Type'),
        (['in', 'optional'], VARIANT, 'Options'),
        (['out', 'retval'], POINTER(POINTER(Recordset)), 'pprst')
    ),
    COMMETHOD([dispid(1610809363)], HRESULT, 'RefreshLink'),
    COMMETHOD(
        [dispid(1610809364)],
        HRESULT,
        'CreateField',
        (['in', 'optional'], VARIANT, 'Name'),
        (['in', 'optional'], VARIANT, 'Type'),
        (['in', 'optional'], VARIANT, 'Size'),
        (['out', 'retval'], POINTER(POINTER(Field)), 'ppfld')
    ),
    COMMETHOD(
        [dispid(1610809365)],
        HRESULT,
        'CreateIndex',
        (['in', 'optional'], VARIANT, 'Name'),
        (['out', 'retval'], POINTER(POINTER(Index)), 'ppidx')
    ),
    COMMETHOD(
        [dispid(1610809366)],
        HRESULT,
        'CreateProperty',
        (['in', 'optional'], VARIANT, 'Name'),
        (['in', 'optional'], VARIANT, 'Type'),
        (['in', 'optional'], VARIANT, 'Value'),
        (['in', 'optional'], VARIANT, 'DDL'),
        (['out', 'retval'], POINTER(POINTER(Property)), 'pprp')
    ),
    COMMETHOD(
        [dispid(1610809367), 'propget'],
        HRESULT,
        'ConflictTable',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809368), 'propget'],
        HRESULT,
        'ReplicaFilter',
        (['out', 'retval'], POINTER(VARIANT), 'pFilter')
    ),
    COMMETHOD(
        [dispid(1610809368), 'propput'],
        HRESULT,
        'ReplicaFilter',
        (['in'], VARIANT, 'pFilter')
    ),
]

################################################################
# code template for _TableDef implementation
# class _TableDef_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return pl
#     def _set(self, pl):
#         '-no docstring-'
#     Attributes = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Connect = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def DateCreated(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def LastUpdated(self):
#         '-no docstring-'
#         #return pvar
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     SourceTableName = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Updatable(self):
#         '-no docstring-'
#         #return pb
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     ValidationText = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     ValidationRule = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def RecordCount(self):
#         '-no docstring-'
#         #return pl
#
#     @property
#     def Fields(self):
#         '-no docstring-'
#         #return ppflds
#
#     @property
#     def Indexes(self):
#         '-no docstring-'
#         #return ppidxs
#
#     def OpenRecordset(self, Type, Options):
#         '-no docstring-'
#         #return pprst
#
#     def RefreshLink(self):
#         '-no docstring-'
#         #return 
#
#     def CreateField(self, Name, Type, Size):
#         '-no docstring-'
#         #return ppfld
#
#     def CreateIndex(self, Name):
#         '-no docstring-'
#         #return ppidx
#
#     def CreateProperty(self, Name, Type, Value, DDL):
#         '-no docstring-'
#         #return pprp
#
#     @property
#     def ConflictTable(self):
#         '-no docstring-'
#         #return pbstr
#
#     def _get(self):
#         '-no docstring-'
#         #return pFilter
#     def _set(self, pFilter):
#         '-no docstring-'
#     ReplicaFilter = property(_get, _set, doc = _set.__doc__)
#

Database._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'CollatingOrder',
        (['out', 'retval'], POINTER(c_int), 'pl')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propget'],
        HRESULT,
        'Connect',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809346), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809347), 'propget'],
        HRESULT,
        'QueryTimeout',
        (['out', 'retval'], POINTER(c_short), 'ps')
    ),
    COMMETHOD(
        [dispid(1610809347), 'propput'],
        HRESULT,
        'QueryTimeout',
        (['in'], c_short, 'ps')
    ),
    COMMETHOD(
        [dispid(1610809349), 'propget'],
        HRESULT,
        'Transactions',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pb')
    ),
    COMMETHOD(
        [dispid(1610809350), 'propget'],
        HRESULT,
        'Updatable',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pb')
    ),
    COMMETHOD(
        [dispid(1610809351), 'propget'],
        HRESULT,
        'Version',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809352), 'propget'],
        HRESULT,
        'RecordsAffected',
        (['out', 'retval'], POINTER(c_int), 'pl')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'TableDefs',
        (['out', 'retval'], POINTER(POINTER(TableDefs)), 'pptdfs')
    ),
    COMMETHOD(
        [dispid(1610809354), 'propget'],
        HRESULT,
        'QueryDefs',
        (['out', 'retval'], POINTER(POINTER(QueryDefs)), 'ppqdfs')
    ),
    COMMETHOD(
        [dispid(1610809355), 'propget'],
        HRESULT,
        'Relations',
        (['out', 'retval'], POINTER(POINTER(Relations)), 'pprls')
    ),
    COMMETHOD(
        [dispid(1610809356), 'propget'],
        HRESULT,
        'Containers',
        (['out', 'retval'], POINTER(POINTER(Containers)), 'ppctns')
    ),
    COMMETHOD(
        [dispid(1610809357), 'propget'],
        HRESULT,
        'Recordsets',
        (['out', 'retval'], POINTER(POINTER(Recordsets)), 'pprsts')
    ),
    COMMETHOD([dispid(1610809358)], HRESULT, 'Close'),
    COMMETHOD(
        [dispid(1610809359)],
        HRESULT,
        'Execute',
        (['in'], BSTR, 'Query'),
        (['in', 'optional'], VARIANT, 'Options')
    ),
    COMMETHOD(
        [dispid(1610809360), 'restricted'],
        HRESULT,
        '_30_OpenRecordset',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], VARIANT, 'Type'),
        (['in', 'optional'], VARIANT, 'Options'),
        (['out', 'retval'], POINTER(POINTER(Recordset)), 'pprst')
    ),
    COMMETHOD(
        [dispid(1610809361)],
        HRESULT,
        'CreateProperty',
        (['in', 'optional'], VARIANT, 'Name'),
        (['in', 'optional'], VARIANT, 'Type'),
        (['in', 'optional'], VARIANT, 'Value'),
        (['in', 'optional'], VARIANT, 'DDL'),
        (['out', 'retval'], POINTER(POINTER(Property)), 'pprp')
    ),
    COMMETHOD(
        [dispid(1610809362)],
        HRESULT,
        'CreateRelation',
        (['in', 'optional'], VARIANT, 'Name'),
        (['in', 'optional'], VARIANT, 'Table'),
        (['in', 'optional'], VARIANT, 'ForeignTable'),
        (['in', 'optional'], VARIANT, 'Attributes'),
        (['out', 'retval'], POINTER(POINTER(Relation)), 'pprel')
    ),
    COMMETHOD(
        [dispid(1610809363)],
        HRESULT,
        'CreateTableDef',
        (['in', 'optional'], VARIANT, 'Name'),
        (['in', 'optional'], VARIANT, 'Attributes'),
        (['in', 'optional'], VARIANT, 'SourceTableName'),
        (['in', 'optional'], VARIANT, 'Connect'),
        (['out', 'retval'], POINTER(POINTER(TableDef)), 'pptdf')
    ),
    COMMETHOD([dispid(1610809364), 'restricted'], HRESULT, 'BeginTrans'),
    COMMETHOD(
        [dispid(1610809365), 'restricted'],
        HRESULT,
        'CommitTrans',
        (['in', 'optional'], c_int, 'Options', 0)
    ),
    COMMETHOD([dispid(1610809366), 'restricted'], HRESULT, 'Rollback'),
    COMMETHOD(
        [dispid(1610809367), 'restricted'],
        HRESULT,
        'CreateDynaset',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], VARIANT, 'Options'),
        (['in', 'optional'], VARIANT, 'Inconsistent'),
        (['out', 'retval'], POINTER(POINTER(Recordset)), 'pprst')
    ),
    COMMETHOD(
        [dispid(1610809368)],
        HRESULT,
        'CreateQueryDef',
        (['in', 'optional'], VARIANT, 'Name'),
        (['in', 'optional'], VARIANT, 'SQLText'),
        (['out', 'retval'], POINTER(POINTER(QueryDef)), 'ppqdf')
    ),
    COMMETHOD(
        [dispid(1610809369), 'restricted'],
        HRESULT,
        'CreateSnapshot',
        (['in'], BSTR, 'Source'),
        (['in', 'optional'], VARIANT, 'Options'),
        (['out', 'retval'], POINTER(POINTER(Recordset)), 'pprst')
    ),
    COMMETHOD(
        [dispid(1610809370), 'restricted'],
        HRESULT,
        'DeleteQueryDef',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(1610809371), 'restricted'],
        HRESULT,
        'ExecuteSQL',
        (['in'], BSTR, 'SQL'),
        (['out', 'retval'], POINTER(c_int), 'pl')
    ),
    COMMETHOD(
        [dispid(1610809372), 'restricted'],
        HRESULT,
        'ListFields',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(POINTER(Recordset)), 'pprst')
    ),
    COMMETHOD(
        [dispid(1610809373), 'restricted'],
        HRESULT,
        'ListTables',
        (['out', 'retval'], POINTER(POINTER(Recordset)), 'pprst')
    ),
    COMMETHOD(
        [dispid(1610809374), 'restricted'],
        HRESULT,
        'OpenQueryDef',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(POINTER(QueryDef)), 'ppqdf')
    ),
    COMMETHOD(
        [dispid(1610809375), 'restricted'],
        HRESULT,
        'OpenTable',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], VARIANT, 'Options'),
        (['out', 'retval'], POINTER(POINTER(Recordset)), 'pprst')
    ),
    COMMETHOD(
        [dispid(1610809376), 'propget'],
        HRESULT,
        'ReplicaID',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809377), 'propget'],
        HRESULT,
        'DesignMasterID',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809377), 'propput'],
        HRESULT,
        'DesignMasterID',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809379)],
        HRESULT,
        'Synchronize',
        (['in'], BSTR, 'DbPathName'),
        (['in', 'optional'], VARIANT, 'ExchangeType')
    ),
    COMMETHOD(
        [dispid(1610809380)],
        HRESULT,
        'MakeReplica',
        (['in'], BSTR, 'PathName'),
        (['in'], BSTR, 'Description'),
        (['in', 'optional'], VARIANT, 'Options')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propput'],
        HRESULT,
        'Connect',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809382)],
        HRESULT,
        'NewPassword',
        (['in'], BSTR, 'bstrOld'),
        (['in'], BSTR, 'bstrNew')
    ),
    COMMETHOD(
        [dispid(1610809383)],
        HRESULT,
        'OpenRecordset',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], VARIANT, 'Type'),
        (['in', 'optional'], VARIANT, 'Options'),
        (['in', 'optional'], VARIANT, 'LockEdit'),
        (['out', 'retval'], POINTER(POINTER(Recordset)), 'pprst')
    ),
    COMMETHOD(
        [dispid(1610809384), 'propget'],
        HRESULT,
        'Connection',
        (['out', 'retval'], POINTER(POINTER(Connection)), 'ppCn')
    ),
    COMMETHOD(
        [dispid(1610809385)],
        HRESULT,
        'PopulatePartial',
        (['in'], BSTR, 'DbPathName')
    ),
]

################################################################
# code template for Database implementation
# class Database_Impl(object):
#     @property
#     def CollatingOrder(self):
#         '-no docstring-'
#         #return pl
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Connect = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return pbstr
#
#     def _get(self):
#         '-no docstring-'
#         #return ps
#     def _set(self, ps):
#         '-no docstring-'
#     QueryTimeout = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Transactions(self):
#         '-no docstring-'
#         #return pb
#
#     @property
#     def Updatable(self):
#         '-no docstring-'
#         #return pb
#
#     @property
#     def Version(self):
#         '-no docstring-'
#         #return pbstr
#
#     @property
#     def RecordsAffected(self):
#         '-no docstring-'
#         #return pl
#
#     @property
#     def TableDefs(self):
#         '-no docstring-'
#         #return pptdfs
#
#     @property
#     def QueryDefs(self):
#         '-no docstring-'
#         #return ppqdfs
#
#     @property
#     def Relations(self):
#         '-no docstring-'
#         #return pprls
#
#     @property
#     def Containers(self):
#         '-no docstring-'
#         #return ppctns
#
#     @property
#     def Recordsets(self):
#         '-no docstring-'
#         #return pprsts
#
#     def Close(self):
#         '-no docstring-'
#         #return 
#
#     def Execute(self, Query, Options):
#         '-no docstring-'
#         #return 
#
#     def _30_OpenRecordset(self, Name, Type, Options):
#         '-no docstring-'
#         #return pprst
#
#     def CreateProperty(self, Name, Type, Value, DDL):
#         '-no docstring-'
#         #return pprp
#
#     def CreateRelation(self, Name, Table, ForeignTable, Attributes):
#         '-no docstring-'
#         #return pprel
#
#     def CreateTableDef(self, Name, Attributes, SourceTableName, Connect):
#         '-no docstring-'
#         #return pptdf
#
#     def BeginTrans(self):
#         '-no docstring-'
#         #return 
#
#     def CommitTrans(self, Options):
#         '-no docstring-'
#         #return 
#
#     def Rollback(self):
#         '-no docstring-'
#         #return 
#
#     def CreateDynaset(self, Name, Options, Inconsistent):
#         '-no docstring-'
#         #return pprst
#
#     def CreateQueryDef(self, Name, SQLText):
#         '-no docstring-'
#         #return ppqdf
#
#     def CreateSnapshot(self, Source, Options):
#         '-no docstring-'
#         #return pprst
#
#     def DeleteQueryDef(self, Name):
#         '-no docstring-'
#         #return 
#
#     def ExecuteSQL(self, SQL):
#         '-no docstring-'
#         #return pl
#
#     def ListFields(self, Name):
#         '-no docstring-'
#         #return pprst
#
#     def ListTables(self):
#         '-no docstring-'
#         #return pprst
#
#     def OpenQueryDef(self, Name):
#         '-no docstring-'
#         #return ppqdf
#
#     def OpenTable(self, Name, Options):
#         '-no docstring-'
#         #return pprst
#
#     @property
#     def ReplicaID(self):
#         '-no docstring-'
#         #return pbstr
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     DesignMasterID = property(_get, _set, doc = _set.__doc__)
#
#     def Synchronize(self, DbPathName, ExchangeType):
#         '-no docstring-'
#         #return 
#
#     def MakeReplica(self, PathName, Description, Options):
#         '-no docstring-'
#         #return 
#
#     def NewPassword(self, bstrOld, bstrNew):
#         '-no docstring-'
#         #return 
#
#     def OpenRecordset(self, Name, Type, Options, LockEdit):
#         '-no docstring-'
#         #return pprst
#
#     @property
#     def Connection(self):
#         '-no docstring-'
#         #return ppCn
#
#     def PopulatePartial(self, DbPathName):
#         '-no docstring-'
#         #return 
#

Properties._methods_ = [
    COMMETHOD(
        [dispid(0), 'hidden', 'propget'],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Item'),
        (['out', 'retval'], POINTER(POINTER(Property)), 'ppprop')
    ),
]

################################################################
# code template for Properties implementation
# class Properties_Impl(object):
#     @property
#     def Item(self, Item):
#         '-no docstring-'
#         #return ppprop
#

Container._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809345), 'hidden', 'propget'],
        HRESULT,
        'Owner',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809345), 'hidden', 'propput'],
        HRESULT,
        'Owner',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809347), 'hidden', 'propget'],
        HRESULT,
        'UserName',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809347), 'hidden', 'propput'],
        HRESULT,
        'UserName',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809349), 'hidden', 'propget'],
        HRESULT,
        'Permissions',
        (['out', 'retval'], POINTER(c_int), 'pl')
    ),
    COMMETHOD(
        [dispid(1610809349), 'hidden', 'propput'],
        HRESULT,
        'Permissions',
        (['in'], c_int, 'pl')
    ),
    COMMETHOD(
        [dispid(1610809351), 'hidden', 'propget'],
        HRESULT,
        'Inherit',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pb')
    ),
    COMMETHOD(
        [dispid(1610809351), 'hidden', 'propput'],
        HRESULT,
        'Inherit',
        (['in'], VARIANT_BOOL, 'pb')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Documents',
        (['out', 'retval'], POINTER(POINTER(Documents)), 'ppdocs')
    ),
    COMMETHOD(
        [dispid(1610809354), 'hidden', 'propget'],
        HRESULT,
        'AllPermissions',
        (['out', 'retval'], POINTER(c_int), 'pl')
    ),
]

################################################################
# code template for Container implementation
# class Container_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return pbstr
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Owner = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     UserName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pl
#     def _set(self, pl):
#         '-no docstring-'
#     Permissions = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pb
#     def _set(self, pb):
#         '-no docstring-'
#     Inherit = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Documents(self):
#         '-no docstring-'
#         #return ppdocs
#
#     @property
#     def AllPermissions(self):
#         '-no docstring-'
#         #return pl
#

Groups._methods_ = [
    COMMETHOD(
        [dispid(0), 'hidden', 'propget'],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Item'),
        (['out', 'retval'], POINTER(POINTER(Group)), 'ppgrp')
    ),
]

################################################################
# code template for Groups implementation
# class Groups_Impl(object):
#     @property
#     def Item(self, Item):
#         '-no docstring-'
#         #return ppgrp
#


class Parameters(_Collection):
    _case_insensitive_ = True
    _iid_ = GUID('{00000083-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Item: hints.Incomplete) -> 'Parameter': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


_QueryDef._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'DateCreated',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propget'],
        HRESULT,
        'LastUpdated',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(1610809346), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809346), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809348), 'propget'],
        HRESULT,
        'ODBCTimeout',
        (['out', 'retval'], POINTER(c_short), 'ps')
    ),
    COMMETHOD(
        [dispid(1610809348), 'propput'],
        HRESULT,
        'ODBCTimeout',
        (['in'], c_short, 'ps')
    ),
    COMMETHOD(
        [dispid(1610809350), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(c_short), 'pi')
    ),
    COMMETHOD(
        [dispid(1610809351), 'propget'],
        HRESULT,
        'SQL',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809351), 'propput'],
        HRESULT,
        'SQL',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809353), 'propget'],
        HRESULT,
        'Updatable',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pb')
    ),
    COMMETHOD(
        [dispid(1610809354), 'propget'],
        HRESULT,
        'Connect',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809354), 'propput'],
        HRESULT,
        'Connect',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809356), 'propget'],
        HRESULT,
        'ReturnsRecords',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pb')
    ),
    COMMETHOD(
        [dispid(1610809356), 'propput'],
        HRESULT,
        'ReturnsRecords',
        (['in'], VARIANT_BOOL, 'pb')
    ),
    COMMETHOD(
        [dispid(1610809358), 'propget'],
        HRESULT,
        'RecordsAffected',
        (['out', 'retval'], POINTER(c_int), 'pl')
    ),
    COMMETHOD(
        [dispid(1610809359), 'propget'],
        HRESULT,
        'Fields',
        (['out', 'retval'], POINTER(POINTER(Fields)), 'ppflds')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Parameters',
        (['out', 'retval'], POINTER(POINTER(Parameters)), 'ppprms')
    ),
    COMMETHOD([dispid(1610809361)], HRESULT, 'Close'),
    COMMETHOD(
        [dispid(1610809362), 'restricted'],
        HRESULT,
        '_30_OpenRecordset',
        (['in', 'optional'], VARIANT, 'Type'),
        (['in', 'optional'], VARIANT, 'Options'),
        (['out', 'retval'], POINTER(POINTER(Recordset)), 'pprst')
    ),
    COMMETHOD(
        [dispid(1610809363), 'restricted'],
        HRESULT,
        '_30__OpenRecordset',
        (['in', 'optional'], VARIANT, 'Type'),
        (['in', 'optional'], VARIANT, 'Options'),
        (['out', 'retval'], POINTER(POINTER(Recordset)), 'pprst')
    ),
    COMMETHOD(
        [dispid(1610809364), 'restricted'],
        HRESULT,
        '_Copy',
        (['out', 'retval'], POINTER(POINTER(QueryDef)), 'ppqdf')
    ),
    COMMETHOD(
        [dispid(1610809365)],
        HRESULT,
        'Execute',
        (['in', 'optional'], VARIANT, 'Options')
    ),
    COMMETHOD(
        [dispid(1610809366), 'restricted'],
        HRESULT,
        'Compare',
        (['in'], POINTER(QueryDef), 'pQdef'),
        (['in'], POINTER(c_short), 'lps')
    ),
    COMMETHOD(
        [dispid(1610809367), 'restricted'],
        HRESULT,
        'CreateDynaset',
        (['in', 'optional'], VARIANT, 'Options'),
        (['in', 'optional'], VARIANT, 'Inconsistent'),
        (['out', 'retval'], POINTER(POINTER(Recordset)), 'pprst')
    ),
    COMMETHOD(
        [dispid(1610809368), 'restricted'],
        HRESULT,
        'CreateSnapshot',
        (['in', 'optional'], VARIANT, 'Options'),
        (['out', 'retval'], POINTER(POINTER(Recordset)), 'pprst')
    ),
    COMMETHOD(
        [dispid(1610809369), 'restricted'],
        HRESULT,
        'ListParameters',
        (['out', 'retval'], POINTER(POINTER(Recordset)), 'pprst')
    ),
    COMMETHOD(
        [dispid(1610809370)],
        HRESULT,
        'CreateProperty',
        (['in', 'optional'], VARIANT, 'Name'),
        (['in', 'optional'], VARIANT, 'Type'),
        (['in', 'optional'], VARIANT, 'Value'),
        (['in', 'optional'], VARIANT, 'DDL'),
        (['out', 'retval'], POINTER(POINTER(Property)), 'pprp')
    ),
    COMMETHOD(
        [dispid(1610809371)],
        HRESULT,
        'OpenRecordset',
        (['in', 'optional'], VARIANT, 'Type'),
        (['in', 'optional'], VARIANT, 'Options'),
        (['in', 'optional'], VARIANT, 'LockEdit'),
        (['out', 'retval'], POINTER(POINTER(Recordset)), 'pprst')
    ),
    COMMETHOD(
        [dispid(1610809372), 'restricted'],
        HRESULT,
        '_OpenRecordset',
        (['in', 'optional'], VARIANT, 'Type'),
        (['in', 'optional'], VARIANT, 'Options'),
        (['in', 'optional'], VARIANT, 'LockEdit'),
        (['out', 'retval'], POINTER(POINTER(Recordset)), 'pprst')
    ),
    COMMETHOD([dispid(1610809373)], HRESULT, 'Cancel'),
    COMMETHOD(
        [dispid(1610809374), 'hidden', 'propget'],
        HRESULT,
        'hStmt',
        (['out', 'retval'], POINTER(c_int), 'phStmt')
    ),
    COMMETHOD(
        [dispid(1610809375), 'propget'],
        HRESULT,
        'MaxRecords',
        (['out', 'retval'], POINTER(c_int), 'pMxRecs')
    ),
    COMMETHOD(
        [dispid(1610809375), 'propput'],
        HRESULT,
        'MaxRecords',
        (['in'], c_int, 'pMxRecs')
    ),
    COMMETHOD(
        [dispid(1610809377), 'propget'],
        HRESULT,
        'StillExecuting',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pStillExec')
    ),
    COMMETHOD(
        [dispid(1610809378), 'propget'],
        HRESULT,
        'CacheSize',
        (['out', 'retval'], POINTER(c_int), 'lCacheSize')
    ),
    COMMETHOD(
        [dispid(1610809378), 'propput'],
        HRESULT,
        'CacheSize',
        (['in'], c_int, 'lCacheSize')
    ),
    COMMETHOD(
        [dispid(1610809380), 'propget'],
        HRESULT,
        'Prepare',
        (['out', 'retval'], POINTER(VARIANT), 'pb')
    ),
    COMMETHOD(
        [dispid(1610809380), 'propput'],
        HRESULT,
        'Prepare',
        (['in'], VARIANT, 'pb')
    ),
]

################################################################
# code template for _QueryDef implementation
# class _QueryDef_Impl(object):
#     @property
#     def DateCreated(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def LastUpdated(self):
#         '-no docstring-'
#         #return pvar
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ps
#     def _set(self, ps):
#         '-no docstring-'
#     ODBCTimeout = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return pi
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     SQL = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Updatable(self):
#         '-no docstring-'
#         #return pb
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Connect = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pb
#     def _set(self, pb):
#         '-no docstring-'
#     ReturnsRecords = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def RecordsAffected(self):
#         '-no docstring-'
#         #return pl
#
#     @property
#     def Fields(self):
#         '-no docstring-'
#         #return ppflds
#
#     @property
#     def Parameters(self):
#         '-no docstring-'
#         #return ppprms
#
#     def Close(self):
#         '-no docstring-'
#         #return 
#
#     def _30_OpenRecordset(self, Type, Options):
#         '-no docstring-'
#         #return pprst
#
#     def _30__OpenRecordset(self, Type, Options):
#         '-no docstring-'
#         #return pprst
#
#     def _Copy(self):
#         '-no docstring-'
#         #return ppqdf
#
#     def Execute(self, Options):
#         '-no docstring-'
#         #return 
#
#     def Compare(self, pQdef, lps):
#         '-no docstring-'
#         #return 
#
#     def CreateDynaset(self, Options, Inconsistent):
#         '-no docstring-'
#         #return pprst
#
#     def CreateSnapshot(self, Options):
#         '-no docstring-'
#         #return pprst
#
#     def ListParameters(self):
#         '-no docstring-'
#         #return pprst
#
#     def CreateProperty(self, Name, Type, Value, DDL):
#         '-no docstring-'
#         #return pprp
#
#     def OpenRecordset(self, Type, Options, LockEdit):
#         '-no docstring-'
#         #return pprst
#
#     def _OpenRecordset(self, Type, Options, LockEdit):
#         '-no docstring-'
#         #return pprst
#
#     def Cancel(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def hStmt(self):
#         '-no docstring-'
#         #return phStmt
#
#     def _get(self):
#         '-no docstring-'
#         #return pMxRecs
#     def _set(self, pMxRecs):
#         '-no docstring-'
#     MaxRecords = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def StillExecuting(self):
#         '-no docstring-'
#         #return pStillExec
#
#     def _get(self):
#         '-no docstring-'
#         #return lCacheSize
#     def _set(self, lCacheSize):
#         '-no docstring-'
#     CacheSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pb
#     def _set(self, pb):
#         '-no docstring-'
#     Prepare = property(_get, _set, doc = _set.__doc__)
#


class PrivDBEngine(CoClass):
    """DAO 3.0 DBEngine (private)"""
    _reg_clsid_ = GUID('{6F3DD387-5AF2-492B-BDE2-30FF2F451241}')
    _idlflags_ = ['licensed', 'hidden']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4AC9E1DA-5BAD-4AC7-86E3-24F4CDCECA28}', 12, 0)


PrivDBEngine._com_interfaces_ = [_DBEngine]


class IndexFields(_DynaCollection):
    _case_insensitive_ = True
    _iid_ = GUID('{0000005D-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Item: hints.Incomplete = ...) -> hints.Incomplete: ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


IndexFields._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in', 'optional'], VARIANT, 'Item'),
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
]

################################################################
# code template for IndexFields implementation
# class IndexFields_Impl(object):
#     @property
#     def Item(self, Item):
#         '-no docstring-'
#         #return pvar
#


class Recordset2(Recordset):
    _case_insensitive_ = True
    _iid_ = GUID('{00000035-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_ParentRecordset(self) -> 'Recordset': ...
        ParentRecordset = hints.normal_property(_get_ParentRecordset)


Recordset2._methods_ = [
    COMMETHOD(
        [dispid(170), 'propget'],
        HRESULT,
        'ParentRecordset',
        (['out', 'retval'], POINTER(POINTER(Recordset)), 'pprst')
    ),
]

################################################################
# code template for Recordset2 implementation
# class Recordset2_Impl(object):
#     @property
#     def ParentRecordset(self):
#         '-no docstring-'
#         #return pprst
#

Recordsets._methods_ = [
    COMMETHOD(
        [dispid(0), 'hidden', 'propget'],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Item'),
        (['out', 'retval'], POINTER(POINTER(Recordset)), 'pprst')
    ),
]

################################################################
# code template for Recordsets implementation
# class Recordsets_Impl(object):
#     @property
#     def Item(self, Item):
#         '-no docstring-'
#         #return pprst
#


class Field2(_Field):
    _case_insensitive_ = True
    _iid_ = GUID('{00000054-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_ComplexType(self) -> 'ComplexType': ...
        ComplexType = hints.normal_property(_get_ComplexType)
        def LoadFromFile(self, FileName: hints.Incomplete) -> hints.Hresult: ...
        def SaveToFile(self, FileName: hints.Incomplete) -> hints.Hresult: ...
        def _get_IsComplex(self) -> hints.Incomplete: ...
        IsComplex = hints.normal_property(_get_IsComplex)
        def _get_AppendOnly(self) -> hints.Incomplete: ...
        def _set_AppendOnly(self, pb: hints.Incomplete) -> hints.Hresult: ...
        AppendOnly = hints.normal_property(_get_AppendOnly, _set_AppendOnly)
        def _get_Expression(self) -> hints.Incomplete: ...
        def _set_Expression(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Expression = hints.normal_property(_get_Expression, _set_Expression)


_Field._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'CollatingOrder',
        (['out', 'retval'], POINTER(c_int), 'pl')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(c_short), 'ps')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propput'],
        HRESULT,
        'Type',
        (['in'], c_short, 'ps')
    ),
    COMMETHOD(
        [dispid(1610809347), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809347), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809349), 'propget'],
        HRESULT,
        'Size',
        (['out', 'retval'], POINTER(c_int), 'pl')
    ),
    COMMETHOD(
        [dispid(1610809349), 'propput'],
        HRESULT,
        'Size',
        (['in'], c_int, 'pl')
    ),
    COMMETHOD(
        [dispid(1610809351), 'propget'],
        HRESULT,
        'SourceField',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809352), 'propget'],
        HRESULT,
        'SourceTable',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Value',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(0), 'propput'],
        HRESULT,
        'Value',
        (['in'], VARIANT, 'pvar')
    ),
    COMMETHOD(
        [dispid(1610809355), 'propget'],
        HRESULT,
        'Attributes',
        (['out', 'retval'], POINTER(c_int), 'pl')
    ),
    COMMETHOD(
        [dispid(1610809355), 'propput'],
        HRESULT,
        'Attributes',
        (['in'], c_int, 'pl')
    ),
    COMMETHOD(
        [dispid(1610809357), 'propget'],
        HRESULT,
        'OrdinalPosition',
        (['out', 'retval'], POINTER(c_short), 'ps')
    ),
    COMMETHOD(
        [dispid(1610809357), 'propput'],
        HRESULT,
        'OrdinalPosition',
        (['in'], c_short, 'ps')
    ),
    COMMETHOD(
        [dispid(1610809359), 'propget'],
        HRESULT,
        'ValidationText',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809359), 'propput'],
        HRESULT,
        'ValidationText',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809361), 'propget'],
        HRESULT,
        'ValidateOnSet',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pb')
    ),
    COMMETHOD(
        [dispid(1610809361), 'propput'],
        HRESULT,
        'ValidateOnSet',
        (['in'], VARIANT_BOOL, 'pb')
    ),
    COMMETHOD(
        [dispid(1610809363), 'propget'],
        HRESULT,
        'ValidationRule',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809363), 'propput'],
        HRESULT,
        'ValidationRule',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809365), 'propget'],
        HRESULT,
        'DefaultValue',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(1610809365), 'propput'],
        HRESULT,
        'DefaultValue',
        (['in'], VARIANT, 'pvar')
    ),
    COMMETHOD(
        [dispid(1610809367), 'propget'],
        HRESULT,
        'Required',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pb')
    ),
    COMMETHOD(
        [dispid(1610809367), 'propput'],
        HRESULT,
        'Required',
        (['in'], VARIANT_BOOL, 'pb')
    ),
    COMMETHOD(
        [dispid(1610809369), 'propget'],
        HRESULT,
        'AllowZeroLength',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pb')
    ),
    COMMETHOD(
        [dispid(1610809369), 'propput'],
        HRESULT,
        'AllowZeroLength',
        (['in'], VARIANT_BOOL, 'pb')
    ),
    COMMETHOD(
        [dispid(1610809371), 'propget'],
        HRESULT,
        'DataUpdatable',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pb')
    ),
    COMMETHOD(
        [dispid(1610809372), 'propget'],
        HRESULT,
        'ForeignName',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809372), 'propput'],
        HRESULT,
        'ForeignName',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809374)],
        HRESULT,
        'AppendChunk',
        (['in'], VARIANT, 'Val')
    ),
    COMMETHOD(
        [dispid(1610809375)],
        HRESULT,
        'GetChunk',
        (['in'], c_int, 'Offset'),
        (['in'], c_int, 'Bytes'),
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(1610809376), 'restricted'],
        HRESULT,
        '_30_FieldSize',
        (['out', 'retval'], POINTER(c_int), 'pl')
    ),
    COMMETHOD(
        [dispid(1610809377)],
        HRESULT,
        'CreateProperty',
        (['in', 'optional'], VARIANT, 'Name'),
        (['in', 'optional'], VARIANT, 'Type'),
        (['in', 'optional'], VARIANT, 'Value'),
        (['in', 'optional'], VARIANT, 'DDL'),
        (['out', 'retval'], POINTER(POINTER(Property)), 'pprp')
    ),
    COMMETHOD(
        [dispid(1610809378), 'hidden', 'propget'],
        HRESULT,
        'CollectionIndex',
        (['out', 'retval'], POINTER(c_short), 'i')
    ),
    COMMETHOD(
        [dispid(1610809379), 'propget'],
        HRESULT,
        'OriginalValue',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(1610809380), 'propget'],
        HRESULT,
        'VisibleValue',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(1610809381), 'propget'],
        HRESULT,
        'FieldSize',
        (['out', 'retval'], POINTER(c_int), 'pl')
    ),
]

################################################################
# code template for _Field implementation
# class _Field_Impl(object):
#     @property
#     def CollatingOrder(self):
#         '-no docstring-'
#         #return pl
#
#     def _get(self):
#         '-no docstring-'
#         #return ps
#     def _set(self, ps):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pl
#     def _set(self, pl):
#         '-no docstring-'
#     Size = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def SourceField(self):
#         '-no docstring-'
#         #return pbstr
#
#     @property
#     def SourceTable(self):
#         '-no docstring-'
#         #return pbstr
#
#     def _get(self):
#         '-no docstring-'
#         #return pvar
#     def _set(self, pvar):
#         '-no docstring-'
#     Value = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pl
#     def _set(self, pl):
#         '-no docstring-'
#     Attributes = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ps
#     def _set(self, ps):
#         '-no docstring-'
#     OrdinalPosition = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     ValidationText = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pb
#     def _set(self, pb):
#         '-no docstring-'
#     ValidateOnSet = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     ValidationRule = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pvar
#     def _set(self, pvar):
#         '-no docstring-'
#     DefaultValue = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pb
#     def _set(self, pb):
#         '-no docstring-'
#     Required = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pb
#     def _set(self, pb):
#         '-no docstring-'
#     AllowZeroLength = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def DataUpdatable(self):
#         '-no docstring-'
#         #return pb
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     ForeignName = property(_get, _set, doc = _set.__doc__)
#
#     def AppendChunk(self, Val):
#         '-no docstring-'
#         #return 
#
#     def GetChunk(self, Offset, Bytes):
#         '-no docstring-'
#         #return pvar
#
#     def _30_FieldSize(self):
#         '-no docstring-'
#         #return pl
#
#     def CreateProperty(self, Name, Type, Value, DDL):
#         '-no docstring-'
#         #return pprp
#
#     @property
#     def CollectionIndex(self):
#         '-no docstring-'
#         #return i
#
#     @property
#     def OriginalValue(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def VisibleValue(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def FieldSize(self):
#         '-no docstring-'
#         #return pl
#

Field2._methods_ = [
    COMMETHOD(
        [dispid(1610874880), 'propget'],
        HRESULT,
        'ComplexType',
        (['out', 'retval'], POINTER(POINTER(ComplexType)), 'ppComplexType')
    ),
    COMMETHOD(
        [dispid(1610874881)],
        HRESULT,
        'LoadFromFile',
        (['in'], BSTR, 'FileName')
    ),
    COMMETHOD(
        [dispid(1610874882)],
        HRESULT,
        'SaveToFile',
        (['in'], BSTR, 'FileName')
    ),
    COMMETHOD(
        [dispid(1610874883), 'propget'],
        HRESULT,
        'IsComplex',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pb')
    ),
    COMMETHOD(
        [dispid(1610874884), 'propget'],
        HRESULT,
        'AppendOnly',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pb')
    ),
    COMMETHOD(
        [dispid(1610874884), 'propput'],
        HRESULT,
        'AppendOnly',
        (['in'], VARIANT_BOOL, 'pb')
    ),
    COMMETHOD(
        [dispid(1610874886), 'propget'],
        HRESULT,
        'Expression',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610874886), 'propput'],
        HRESULT,
        'Expression',
        (['in'], BSTR, 'pbstr')
    ),
]

################################################################
# code template for Field2 implementation
# class Field2_Impl(object):
#     @property
#     def ComplexType(self):
#         '-no docstring-'
#         #return ppComplexType
#
#     def LoadFromFile(self, FileName):
#         '-no docstring-'
#         #return 
#
#     def SaveToFile(self, FileName):
#         '-no docstring-'
#         #return 
#
#     @property
#     def IsComplex(self):
#         '-no docstring-'
#         #return pb
#
#     def _get(self):
#         '-no docstring-'
#         #return pb
#     def _set(self, pb):
#         '-no docstring-'
#     AppendOnly = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Expression = property(_get, _set, doc = _set.__doc__)
#

_Index._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809344), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809346), 'propget'],
        HRESULT,
        'Foreign',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pb')
    ),
    COMMETHOD(
        [dispid(1610809347), 'propget'],
        HRESULT,
        'Unique',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pb')
    ),
    COMMETHOD(
        [dispid(1610809347), 'propput'],
        HRESULT,
        'Unique',
        (['in'], VARIANT_BOOL, 'pb')
    ),
    COMMETHOD(
        [dispid(1610809349), 'propget'],
        HRESULT,
        'Clustered',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pb')
    ),
    COMMETHOD(
        [dispid(1610809349), 'propput'],
        HRESULT,
        'Clustered',
        (['in'], VARIANT_BOOL, 'pb')
    ),
    COMMETHOD(
        [dispid(1610809351), 'propget'],
        HRESULT,
        'Required',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pb')
    ),
    COMMETHOD(
        [dispid(1610809351), 'propput'],
        HRESULT,
        'Required',
        (['in'], VARIANT_BOOL, 'pb')
    ),
    COMMETHOD(
        [dispid(1610809353), 'propget'],
        HRESULT,
        'IgnoreNulls',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pb')
    ),
    COMMETHOD(
        [dispid(1610809353), 'propput'],
        HRESULT,
        'IgnoreNulls',
        (['in'], VARIANT_BOOL, 'pb')
    ),
    COMMETHOD(
        [dispid(1610809355), 'propget'],
        HRESULT,
        'Primary',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pb')
    ),
    COMMETHOD(
        [dispid(1610809355), 'propput'],
        HRESULT,
        'Primary',
        (['in'], VARIANT_BOOL, 'pb')
    ),
    COMMETHOD(
        [dispid(1610809357), 'propget'],
        HRESULT,
        'DistinctCount',
        (['out', 'retval'], POINTER(c_int), 'pl')
    ),
    COMMETHOD(
        [dispid(1610809358), 'propget'],
        HRESULT,
        'Fields',
        (['out', 'retval'], POINTER(VARIANT), 'pv')
    ),
    COMMETHOD(
        [dispid(1610809358), 'propput'],
        HRESULT,
        'Fields',
        (['in'], VARIANT, 'pv')
    ),
    COMMETHOD(
        [dispid(1610809360)],
        HRESULT,
        'CreateField',
        (['in', 'optional'], VARIANT, 'Name'),
        (['in', 'optional'], VARIANT, 'Type'),
        (['in', 'optional'], VARIANT, 'Size'),
        (['out', 'retval'], POINTER(POINTER(Field)), 'ppfld')
    ),
    COMMETHOD(
        [dispid(1610809361)],
        HRESULT,
        'CreateProperty',
        (['in', 'optional'], VARIANT, 'Name'),
        (['in', 'optional'], VARIANT, 'Type'),
        (['in', 'optional'], VARIANT, 'Value'),
        (['in', 'optional'], VARIANT, 'DDL'),
        (['out', 'retval'], POINTER(POINTER(Property)), 'pprp')
    ),
]

################################################################
# code template for _Index implementation
# class _Index_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Foreign(self):
#         '-no docstring-'
#         #return pb
#
#     def _get(self):
#         '-no docstring-'
#         #return pb
#     def _set(self, pb):
#         '-no docstring-'
#     Unique = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pb
#     def _set(self, pb):
#         '-no docstring-'
#     Clustered = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pb
#     def _set(self, pb):
#         '-no docstring-'
#     Required = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pb
#     def _set(self, pb):
#         '-no docstring-'
#     IgnoreNulls = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pb
#     def _set(self, pb):
#         '-no docstring-'
#     Primary = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def DistinctCount(self):
#         '-no docstring-'
#         #return pl
#
#     def _get(self):
#         '-no docstring-'
#         #return pv
#     def _set(self, pv):
#         '-no docstring-'
#     Fields = property(_get, _set, doc = _set.__doc__)
#
#     def CreateField(self, Name, Type, Size):
#         '-no docstring-'
#         #return ppfld
#
#     def CreateProperty(self, Name, Type, Value, DDL):
#         '-no docstring-'
#         #return pprp
#

Property._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Value',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(0), 'propput'],
        HRESULT,
        'Value',
        (['in'], VARIANT, 'pval')
    ),
    COMMETHOD(
        [dispid(1610809346), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809346), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809348), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(c_short), 'ptype')
    ),
    COMMETHOD(
        [dispid(1610809348), 'propput'],
        HRESULT,
        'Type',
        (['in'], c_short, 'ptype')
    ),
    COMMETHOD(
        [dispid(1610809350), 'propget'],
        HRESULT,
        'Inherited',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pb')
    ),
]

################################################################
# code template for Property implementation
# class Property_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     Value = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ptype
#     def _set(self, ptype):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Inherited(self):
#         '-no docstring-'
#         #return pb
#


class Field3(Field2):
    _case_insensitive_ = True
    _iid_ = GUID('{00000057-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Precision(self) -> hints.Incomplete: ...
        def _set_Precision(self, pl: hints.Incomplete) -> hints.Hresult: ...
        Precision = hints.normal_property(_get_Precision, _set_Precision)
        def _get_Scale(self) -> hints.Incomplete: ...
        def _set_Scale(self, pl: hints.Incomplete) -> hints.Hresult: ...
        Scale = hints.normal_property(_get_Scale, _set_Scale)


Field3._methods_ = [
    COMMETHOD(
        [dispid(1610940416), 'propget'],
        HRESULT,
        'Precision',
        (['out', 'retval'], POINTER(c_short), 'pl')
    ),
    COMMETHOD(
        [dispid(1610940416), 'propput'],
        HRESULT,
        'Precision',
        (['in'], c_short, 'pl')
    ),
    COMMETHOD(
        [dispid(1610940418), 'propget'],
        HRESULT,
        'Scale',
        (['out', 'retval'], POINTER(c_short), 'pl')
    ),
    COMMETHOD(
        [dispid(1610940418), 'propput'],
        HRESULT,
        'Scale',
        (['in'], c_short, 'pl')
    ),
]

################################################################
# code template for Field3 implementation
# class Field3_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return pl
#     def _set(self, pl):
#         '-no docstring-'
#     Precision = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pl
#     def _set(self, pl):
#         '-no docstring-'
#     Scale = property(_get, _set, doc = _set.__doc__)
#

Users._methods_ = [
    COMMETHOD(
        [dispid(0), 'hidden', 'propget'],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Item'),
        (['out', 'retval'], POINTER(POINTER(User)), 'ppusr')
    ),
]

################################################################
# code template for Users implementation
# class Users_Impl(object):
#     @property
#     def Item(self, Item):
#         '-no docstring-'
#         #return ppusr
#


class Library(object):
    """Microsoft Office 16.0 Access database engine Object Library"""
    name = 'DAO'
    _reg_typelib_ = ('{4AC9E1DA-5BAD-4AC7-86E3-24F4CDCECA28}', 12, 0)


class Parameter(_DAO):
    _case_insensitive_ = True
    _iid_ = GUID('{00000081-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Value(self) -> hints.Incomplete: ...
        def _set_Value(self, pvar: hints.Incomplete) -> hints.Hresult: ...
        Value = hints.normal_property(_get_Value, _set_Value)
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, ps: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)
        def _get_Direction(self) -> hints.Incomplete: ...
        def _set_Direction(self, pOption: hints.Incomplete) -> hints.Hresult: ...
        Direction = hints.normal_property(_get_Direction, _set_Direction)


Parameters._methods_ = [
    COMMETHOD(
        [dispid(0), 'hidden', 'propget'],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Item'),
        (['out', 'retval'], POINTER(POINTER(Parameter)), 'ppprm')
    ),
]

################################################################
# code template for Parameters implementation
# class Parameters_Impl(object):
#     @property
#     def Item(self, Item):
#         '-no docstring-'
#         #return ppprm
#


class Error(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{00000023-0000-0010-8000-00AA006D2EA4}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Number(self) -> hints.Incomplete: ...
        Number = hints.normal_property(_get_Number)
        def _get_Source(self) -> hints.Incomplete: ...
        Source = hints.normal_property(_get_Source)
        def _get_Description(self) -> hints.Incomplete: ...
        Description = hints.normal_property(_get_Description)
        def _get_HelpFile(self) -> hints.Incomplete: ...
        HelpFile = hints.normal_property(_get_HelpFile)
        def _get_HelpContext(self) -> hints.Incomplete: ...
        HelpContext = hints.normal_property(_get_HelpContext)


Error._methods_ = [
    COMMETHOD(
        [dispid(1610743808), 'propget'],
        HRESULT,
        'Number',
        (['out', 'retval'], POINTER(c_int), 'pl')
    ),
    COMMETHOD(
        [dispid(1610743809), 'propget'],
        HRESULT,
        'Source',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Description',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743811), 'hidden', 'propget'],
        HRESULT,
        'HelpFile',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743812), 'hidden', 'propget'],
        HRESULT,
        'HelpContext',
        (['out', 'retval'], POINTER(c_int), 'pl')
    ),
]

################################################################
# code template for Error implementation
# class Error_Impl(object):
#     @property
#     def Number(self):
#         '-no docstring-'
#         #return pl
#
#     @property
#     def Source(self):
#         '-no docstring-'
#         #return pbstr
#
#     @property
#     def Description(self):
#         '-no docstring-'
#         #return pbstr
#
#     @property
#     def HelpFile(self):
#         '-no docstring-'
#         #return pbstr
#
#     @property
#     def HelpContext(self):
#         '-no docstring-'
#         #return pl
#

Connections._methods_ = [
    COMMETHOD(
        [dispid(0), 'hidden', 'propget'],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Item'),
        (['out', 'retval'], POINTER(POINTER(Connection)), 'ppconn')
    ),
]

################################################################
# code template for Connections implementation
# class Connections_Impl(object):
#     @property
#     def Item(self, Item):
#         '-no docstring-'
#         #return ppconn
#

Indexes._methods_ = [
    COMMETHOD(
        [dispid(0), 'hidden', 'propget'],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Item'),
        (['out', 'retval'], POINTER(POINTER(Index)), 'ppidx')
    ),
]

################################################################
# code template for Indexes implementation
# class Indexes_Impl(object):
#     @property
#     def Item(self, Item):
#         '-no docstring-'
#         #return ppidx
#

Fields._methods_ = [
    COMMETHOD(
        [dispid(0), 'hidden', 'propget'],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Item'),
        (['out', 'retval'], POINTER(POINTER(Field)), 'ppfld')
    ),
]

################################################################
# code template for Fields implementation
# class Fields_Impl(object):
#     @property
#     def Item(self, Item):
#         '-no docstring-'
#         #return ppfld
#

Parameter._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Value',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(0), 'propput'],
        HRESULT,
        'Value',
        (['in'], VARIANT, 'pvar')
    ),
    COMMETHOD(
        [dispid(1610809347), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(c_short), 'ps')
    ),
    COMMETHOD(
        [dispid(1610809347), 'propput'],
        HRESULT,
        'Type',
        (['in'], c_short, 'ps')
    ),
    COMMETHOD(
        [dispid(1610809349), 'propget'],
        HRESULT,
        'Direction',
        (['out', 'retval'], POINTER(c_short), 'pOption')
    ),
    COMMETHOD(
        [dispid(1610809349), 'propput'],
        HRESULT,
        'Direction',
        (['in'], c_short, 'pOption')
    ),
]

################################################################
# code template for Parameter implementation
# class Parameter_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return pbstr
#
#     def _get(self):
#         '-no docstring-'
#         #return pvar
#     def _set(self, pvar):
#         '-no docstring-'
#     Value = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ps
#     def _set(self, ps):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pOption
#     def _set(self, pOption):
#         '-no docstring-'
#     Direction = property(_get, _set, doc = _set.__doc__)
#

Errors._methods_ = [
    COMMETHOD(
        [dispid(0), 'hidden', 'propget'],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Item'),
        (['out', 'retval'], POINTER(POINTER(Error)), 'pperr')
    ),
]

################################################################
# code template for Errors implementation
# class Errors_Impl(object):
#     @property
#     def Item(self, Item):
#         '-no docstring-'
#         #return pperr
#

_User._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809344), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809346), 'propput'],
        HRESULT,
        'PID',
        (['in'], BSTR, 'rhs')
    ),
    COMMETHOD(
        [dispid(1610809347), 'propput'],
        HRESULT,
        'Password',
        (['in'], BSTR, 'rhs')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Groups',
        (['out', 'retval'], POINTER(POINTER(Groups)), 'ppgrps')
    ),
    COMMETHOD(
        [dispid(1610809349)],
        HRESULT,
        'NewPassword',
        (['in'], BSTR, 'bstrOld'),
        (['in'], BSTR, 'bstrNew')
    ),
    COMMETHOD(
        [dispid(1610809350)],
        HRESULT,
        'CreateGroup',
        (['in', 'optional'], VARIANT, 'Name'),
        (['in', 'optional'], VARIANT, 'PID'),
        (['out', 'retval'], POINTER(POINTER(Group)), 'ppgrp')
    ),
]

################################################################
# code template for _User implementation
# class _User_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _set(self, rhs):
#         '-no docstring-'
#     PID = property(fset = _set, doc = _set.__doc__)
#
#     def _set(self, rhs):
#         '-no docstring-'
#     Password = property(fset = _set, doc = _set.__doc__)
#
#     @property
#     def Groups(self):
#         '-no docstring-'
#         #return ppgrps
#
#     def NewPassword(self, bstrOld, bstrNew):
#         '-no docstring-'
#         #return 
#
#     def CreateGroup(self, Name, PID):
#         '-no docstring-'
#         #return ppgrp
#

__all__ = [
    'dbDescending', 'dbInconsistent', 'dbSortIcelandic',
    'dbSortHindi', 'dbQUnprepare', 'dbLangHindi', 'dbSecInsertData',
    'Recordset', 'Users', 'Relations', 'dbAttachedTable',
    'dbPessimistic', 'dbSingle', 'dbQSetOperation', 'dbRecordNew',
    'Workspaces', 'ReplicableBool', 'Databases', 'Properties',
    'dbLangNordic', 'dbSortSlovenian', 'User', 'dbSecRetrieveData',
    'TableDefAttributeEnum', 'dbEditNone', 'dbLangKorean',
    'dbLangCyrillic', 'Containers', 'dbDenyRead',
    'UpdateCriteriaEnum', 'dbUseDefaultCursor', 'CollatingOrderEnum',
    'Field2', 'dbVariableField', 'dbLangGeneral',
    'dbSortChineseTraditional', 'dbVersion150', 'dbSortJapanese',
    'dbUpdateBatch', 'dbUseJet', 'dbComplexGUID',
    'dbRepImpExpChanges', 'EditModeEnum', 'dbComplexLong',
    'dbUseClientBatchCursor', 'dbRelationRight', 'dbSecWriteOwner',
    'dbQMakeTable', 'dbSortSpanish', 'dbSecDBExclusive',
    'dbLangTurkish', 'Connections', 'dbCurrency', 'DriverPromptEnum',
    'dbParamInput', 'dbRepImportChanges', 'Errors', 'dbVersion20',
    'dbCriteriaTimestamp', 'LogMessages', 'dbAttachSavePWD',
    'dbAttachment', 'RecordStatusEnum', 'dbEditAdd', 'ComplexType',
    'dbPasswordEncryptionKeyLength', 'DBEngine', 'dbAttachedODBC',
    'dbRepSyncInternet', 'FieldAttributeEnum', 'dbSecReplaceData',
    'WorkspaceTypeEnum', 'Connection', '_DynaCollection',
    'IndexFields', 'dbCriteriaModValues', 'QueryDefs',
    'dbSecNoAccess', 'dbLangChineseSimplified', 'CursorDriverEnum',
    'dbVersion11', 'dbVersion120', 'V1xNullBehavior',
    'dbAttachExclusive', '_Collection', 'Library', 'dbSecReadDef',
    'dbLangThai', 'dbVersion30', 'dbOpenDynamic', 'dbFailOnError',
    'dbSharedAsyncDelay', 'dbSystemObject', 'Documents',
    'dbLangHungarian', 'dbSortKorean', 'dbRunAsync', 'TableDef',
    'DatabaseTypeEnum', 'dbSortTurkish', '_DBEngine', 'dbDecimal',
    'dbSortChineseSimplified', 'Parameter', 'dbLangDutch',
    '_QueryDef', 'dbRepMakeReadOnly', 'dbPasswordEncryptionProvider',
    'dbSortGreek', 'dbLongBinary', 'dbUseODBCCursor', 'dbSortSwedFin',
    'dbSecDBCreate', 'dbGUID', 'dbSortJapaneseRadicalStrokeCount',
    'dbQProcedure', 'dbInteger', 'dbPasswordEncryptionAlgorithm',
    'IdleEnum', 'dbComplexDecimal', 'dbSortPDXSwe', 'dbDriverPrompt',
    'Error', 'dbLangJapaneseRadicalStrokeCount', 'dbAppendOnly',
    'Recordset2', 'dbRecordUnmodified', 'dbTime', 'dbLockDelay',
    'dbLangPolish', 'dbVersion140', 'dbDouble', 'dbLangSlovenian',
    '_User', 'RecordsetTypeEnum', 'dbLangJapanese', 'dbLangIcelandic',
    'dbExecDirect', 'dbLangSpanish', 'dbQSelect', 'Field',
    'dbTimeStamp', 'Document', '_DAOSuppHelp', 'dbSortPolish',
    'dbUseServerCursor', 'dbVersion40', 'dbSortArabic',
    'dbSortNorwdan', 'Replicable', 'dbSortPDXIntl',
    'dbParamReturnValue', 'dbHiddenObject', 'dbSortHebrew', 'Fields',
    'dbVersion167', 'dbCriteriaKey', 'dbLong', 'dbForwardOnly',
    'dbSecWriteSec', 'dbSecCreate', 'dbDenyWrite', '_Index',
    'dbEncrypt', 'dbOpenTable', 'Groups', 'dbText', 'Workspace',
    'dbVersion10', 'Recordsets', 'QueryDef', 'Field3', 'dbQAppend',
    'dbSeeChanges', 'dbComplexByte', 'dbSecDBAdmin', 'dbLangSwedFin',
    'dbReadOnly', 'dbUpdateCurrentRecord', 'RelationAttributeEnum',
    'dbOpenForwardOnly', 'dbConsistent', 'dbCriteriaDeleteInsert',
    'dbSortThai', 'dbRelationDeleteCascade', 'QueryDefStateEnum',
    'dbMaxLocksPerFile', 'dbParamInputOutput', 'dbFloat',
    'dbQCrosstab', 'Property', 'dbQCompound', 'dbSecDeleteData',
    'dbUserCommitSync', 'dbRecycleLVs', 'dbExclusiveAsyncDelay',
    'dbRelationLeft', 'dbSortCyrillic', 'QueryDefTypeEnum', 'dbDate',
    'dbFixedField', 'DataTypeEnum', 'dbSystemField', 'dbSecReadSec',
    'dbOptimisticBatch', 'dbUpdateRegular', '_TableDef', 'TableDefs',
    'dbUpdatableField', 'dbRepExportChanges',
    'dbFlushTransactionTimeout', 'PrivDBEngine', 'dbRecordDeleted',
    'KeepLocal', 'dbChar', 'dbUseODBC', 'dbRelationUpdateCascade',
    'Index', 'dbSortCzech', 'dbPageTimeout', 'dbSecFullAccess',
    'Relation', 'dbByte', 'dbQAction', 'ParameterDirectionEnum',
    'dbSortDutch', 'dbSortPDXNor', 'dbQUpdate', 'dbNumeric',
    'dbComplexSingle', 'dbDriverComplete', 'dbSecDelete', 'dbQDDL',
    'LockTypeEnum', 'dbSortUndefined', 'dbComplexText', 'Group',
    'dbOptimistic', 'dbMaxBufferSize', 'dbEditInProgress', '_DAO',
    'dbRelationDontEnforce', 'dbPagesLockedToTableLock',
    'dbSortNeutral', 'dbLangHebrew', '_Group', 'dbDateTimeExtended',
    'dbRecordModified', 'dbQDelete', 'dbSortHungarian', 'dbLangGreek',
    'dbBinary', 'dbForceOSFlush', 'ReplicaTypeEnum',
    'dbRecordDBDeleted', 'dbDriverNoPrompt', 'typelib_path',
    'CommitTransOptionsEnum', 'dbOpenSnapshot', 'dbLangArabic',
    'dbLangChineseTraditional', 'Database', 'dbRelationInherited',
    'dbSQLPassThrough', 'dbFreeLocks', 'SynchronizeTypeEnum',
    'dbRefreshCache', '_Relation', 'dbRelationUnique',
    'RecordsetOptionEnum', 'dbDriverCompleteRequired', 'dbMemo',
    'dbImplicitCommitSync', 'dbParamOutput', 'dbRepMakePartial',
    'Parameters', 'Container', 'dbSecDBOpen', 'dbLangCzech',
    'dbQSQLPassThrough', 'dbQPrepare', 'dbLangNorwDan', 'dbBoolean',
    'dbAutoIncrField', 'dbCriteriaUpdate', 'dbHyperlinkField',
    'dbBigInt', 'dbLockRetry', 'dbSortGeneral', 'UpdateTypeEnum',
    'SetOptionEnum', '_Field', 'dbUseNoCursor', 'dbCriteriaAllCols',
    'dbDecrypt', 'dbComplexInteger', 'dbComplexDouble', 'Indexes',
    'PermissionEnum', 'dbOpenDynaset', 'dbVarBinary',
    'dbOptimisticValue', 'dbQSPTBulk', 'dbSecWriteDef'
]

_check_version('1.4.9', 1736708988.495046)

